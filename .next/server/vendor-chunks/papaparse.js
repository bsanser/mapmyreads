/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/papaparse";
exports.ids = ["vendor-chunks/papaparse"];
exports.modules = {

/***/ "(ssr)/./node_modules/papaparse/papaparse.js":
/*!*********************************************!*\
  !*** ./node_modules/papaparse/papaparse.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* @license\nPapa Parse\nv5.5.3\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/ (function(root, factory) {\n    /* globals define */ if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n// in strict mode we cannot access arguments.callee, so we need a named reference to\n// stringify the factory method for the blob worker\n// eslint-disable-next-line func-name\n})(this, function moduleFactory() {\n    \"use strict\";\n    var global = function() {\n        // alternative method, similar to `Function('return this')()`\n        // but without using `eval` (which is disabled when\n        // using Content Security Policy).\n        if (typeof self !== \"undefined\") {\n            return self;\n        }\n        if (false) {}\n        if (typeof global !== \"undefined\") {\n            return global;\n        }\n        // When running tests none of the above have been defined\n        return {};\n    }();\n    function getWorkerBlob() {\n        var URL = global.URL || global.webkitURL || null;\n        var code = moduleFactory.toString();\n        return Papa.BLOB_URL || (Papa.BLOB_URL = URL.createObjectURL(new Blob([\n            \"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\n            \"(\",\n            code,\n            \")();\"\n        ], {\n            type: \"text/javascript\"\n        })));\n    }\n    var IS_WORKER = !global.document && !!global.postMessage, IS_PAPA_WORKER = global.IS_PAPA_WORKER || false;\n    var workers = {}, workerIdCounter = 0;\n    var Papa = {};\n    Papa.parse = CsvToJson;\n    Papa.unparse = JsonToCsv;\n    Papa.RECORD_SEP = String.fromCharCode(30);\n    Papa.UNIT_SEP = String.fromCharCode(31);\n    Papa.BYTE_ORDER_MARK = \"\\uFEFF\";\n    Papa.BAD_DELIMITERS = [\n        \"\\r\",\n        \"\\n\",\n        '\"',\n        Papa.BYTE_ORDER_MARK\n    ];\n    Papa.WORKERS_SUPPORTED = !IS_WORKER && !!global.Worker;\n    Papa.NODE_STREAM_INPUT = 1;\n    // Configurable chunk sizes for local and remote files, respectively\n    Papa.LocalChunkSize = 1024 * 1024 * 10; // 10 MB\n    Papa.RemoteChunkSize = 1024 * 1024 * 5; // 5 MB\n    Papa.DefaultDelimiter = \",\"; // Used if not specified and detection fails\n    // Exposed for testing and development only\n    Papa.Parser = Parser;\n    Papa.ParserHandle = ParserHandle;\n    Papa.NetworkStreamer = NetworkStreamer;\n    Papa.FileStreamer = FileStreamer;\n    Papa.StringStreamer = StringStreamer;\n    Papa.ReadableStreamStreamer = ReadableStreamStreamer;\n    if (typeof PAPA_BROWSER_CONTEXT === \"undefined\") {\n        Papa.DuplexStreamStreamer = DuplexStreamStreamer;\n    }\n    if (global.jQuery) {\n        var $ = global.jQuery;\n        $.fn.parse = function(options) {\n            var config = options.config || {};\n            var queue = [];\n            this.each(function(idx) {\n                var supported = $(this).prop(\"tagName\").toUpperCase() === \"INPUT\" && $(this).attr(\"type\").toLowerCase() === \"file\" && global.FileReader;\n                if (!supported || !this.files || this.files.length === 0) return true; // continue to next input element\n                for(var i = 0; i < this.files.length; i++){\n                    queue.push({\n                        file: this.files[i],\n                        inputElem: this,\n                        instanceConfig: $.extend({}, config)\n                    });\n                }\n            });\n            parseNextFile(); // begin parsing\n            return this; // maintains chainability\n            function parseNextFile() {\n                if (queue.length === 0) {\n                    if (isFunction(options.complete)) options.complete();\n                    return;\n                }\n                var f = queue[0];\n                if (isFunction(options.before)) {\n                    var returned = options.before(f.file, f.inputElem);\n                    if (typeof returned === \"object\") {\n                        if (returned.action === \"abort\") {\n                            error(\"AbortError\", f.file, f.inputElem, returned.reason);\n                            return; // Aborts all queued files immediately\n                        } else if (returned.action === \"skip\") {\n                            fileComplete(); // parse the next file in the queue, if any\n                            return;\n                        } else if (typeof returned.config === \"object\") f.instanceConfig = $.extend(f.instanceConfig, returned.config);\n                    } else if (returned === \"skip\") {\n                        fileComplete(); // parse the next file in the queue, if any\n                        return;\n                    }\n                }\n                // Wrap up the user's complete callback, if any, so that ours also gets executed\n                var userCompleteFunc = f.instanceConfig.complete;\n                f.instanceConfig.complete = function(results) {\n                    if (isFunction(userCompleteFunc)) userCompleteFunc(results, f.file, f.inputElem);\n                    fileComplete();\n                };\n                Papa.parse(f.file, f.instanceConfig);\n            }\n            function error(name, file, elem, reason) {\n                if (isFunction(options.error)) options.error({\n                    name: name\n                }, file, elem, reason);\n            }\n            function fileComplete() {\n                queue.splice(0, 1);\n                parseNextFile();\n            }\n        };\n    }\n    if (IS_PAPA_WORKER) {\n        global.onmessage = workerThreadReceivedMessage;\n    }\n    function CsvToJson(_input, _config) {\n        _config = _config || {};\n        var dynamicTyping = _config.dynamicTyping || false;\n        if (isFunction(dynamicTyping)) {\n            _config.dynamicTypingFunction = dynamicTyping;\n            // Will be filled on first row call\n            dynamicTyping = {};\n        }\n        _config.dynamicTyping = dynamicTyping;\n        _config.transform = isFunction(_config.transform) ? _config.transform : false;\n        if (_config.worker && Papa.WORKERS_SUPPORTED) {\n            var w = newWorker();\n            w.userStep = _config.step;\n            w.userChunk = _config.chunk;\n            w.userComplete = _config.complete;\n            w.userError = _config.error;\n            _config.step = isFunction(_config.step);\n            _config.chunk = isFunction(_config.chunk);\n            _config.complete = isFunction(_config.complete);\n            _config.error = isFunction(_config.error);\n            delete _config.worker; // prevent infinite loop\n            w.postMessage({\n                input: _input,\n                config: _config,\n                workerId: w.id\n            });\n            return;\n        }\n        var streamer = null;\n        if (_input === Papa.NODE_STREAM_INPUT && typeof PAPA_BROWSER_CONTEXT === \"undefined\") {\n            // create a node Duplex stream for use\n            // with .pipe\n            streamer = new DuplexStreamStreamer(_config);\n            return streamer.getStream();\n        } else if (typeof _input === \"string\") {\n            _input = stripBom(_input);\n            if (_config.download) streamer = new NetworkStreamer(_config);\n            else streamer = new StringStreamer(_config);\n        } else if (_input.readable === true && isFunction(_input.read) && isFunction(_input.on)) {\n            streamer = new ReadableStreamStreamer(_config);\n        } else if (global.File && _input instanceof File || _input instanceof Object) streamer = new FileStreamer(_config);\n        return streamer.stream(_input);\n        // Strip character from UTF-8 BOM encoded files that cause issue parsing the file\n        function stripBom(string) {\n            if (string.charCodeAt(0) === 0xfeff) {\n                return string.slice(1);\n            }\n            return string;\n        }\n    }\n    function JsonToCsv(_input, _config) {\n        // Default configuration\n        /** whether to surround every datum with quotes */ var _quotes = false;\n        /** whether to write headers */ var _writeHeader = true;\n        /** delimiting character(s) */ var _delimiter = \",\";\n        /** newline character(s) */ var _newline = \"\\r\\n\";\n        /** quote character */ var _quoteChar = '\"';\n        /** escaped quote character, either \"\" or <config.escapeChar>\" */ var _escapedQuote = _quoteChar + _quoteChar;\n        /** whether to skip empty lines */ var _skipEmptyLines = false;\n        /** the columns (keys) we expect when we unparse objects */ var _columns = null;\n        /** whether to prevent outputting cells that can be parsed as formulae by spreadsheet software (Excel and LibreOffice) */ var _escapeFormulae = false;\n        unpackConfig();\n        var quoteCharRegex = new RegExp(escapeRegExp(_quoteChar), \"g\");\n        if (typeof _input === \"string\") _input = JSON.parse(_input);\n        if (Array.isArray(_input)) {\n            if (!_input.length || Array.isArray(_input[0])) return serialize(null, _input, _skipEmptyLines);\n            else if (typeof _input[0] === \"object\") return serialize(_columns || Object.keys(_input[0]), _input, _skipEmptyLines);\n        } else if (typeof _input === \"object\") {\n            if (typeof _input.data === \"string\") _input.data = JSON.parse(_input.data);\n            if (Array.isArray(_input.data)) {\n                if (!_input.fields) _input.fields = _input.meta && _input.meta.fields || _columns;\n                if (!_input.fields) _input.fields = Array.isArray(_input.data[0]) ? _input.fields : typeof _input.data[0] === \"object\" ? Object.keys(_input.data[0]) : [];\n                if (!Array.isArray(_input.data[0]) && typeof _input.data[0] !== \"object\") _input.data = [\n                    _input.data\n                ]; // handles input like [1,2,3] or ['asdf']\n            }\n            return serialize(_input.fields || [], _input.data || [], _skipEmptyLines);\n        }\n        // Default (any valid paths should return before this)\n        throw new Error(\"Unable to serialize unrecognized input\");\n        function unpackConfig() {\n            if (typeof _config !== \"object\") return;\n            if (typeof _config.delimiter === \"string\" && !Papa.BAD_DELIMITERS.filter(function(value) {\n                return _config.delimiter.indexOf(value) !== -1;\n            }).length) {\n                _delimiter = _config.delimiter;\n            }\n            if (typeof _config.quotes === \"boolean\" || typeof _config.quotes === \"function\" || Array.isArray(_config.quotes)) _quotes = _config.quotes;\n            if (typeof _config.skipEmptyLines === \"boolean\" || typeof _config.skipEmptyLines === \"string\") _skipEmptyLines = _config.skipEmptyLines;\n            if (typeof _config.newline === \"string\") _newline = _config.newline;\n            if (typeof _config.quoteChar === \"string\") _quoteChar = _config.quoteChar;\n            if (typeof _config.header === \"boolean\") _writeHeader = _config.header;\n            if (Array.isArray(_config.columns)) {\n                if (_config.columns.length === 0) throw new Error(\"Option columns is empty\");\n                _columns = _config.columns;\n            }\n            if (_config.escapeChar !== undefined) {\n                _escapedQuote = _config.escapeChar + _quoteChar;\n            }\n            if (_config.escapeFormulae instanceof RegExp) {\n                _escapeFormulae = _config.escapeFormulae;\n            } else if (typeof _config.escapeFormulae === \"boolean\" && _config.escapeFormulae) {\n                _escapeFormulae = /^[=+\\-@\\t\\r].*$/;\n            }\n        }\n        /** The double for loop that iterates the data and writes out a CSV string including header row */ function serialize(fields, data, skipEmptyLines) {\n            var csv = \"\";\n            if (typeof fields === \"string\") fields = JSON.parse(fields);\n            if (typeof data === \"string\") data = JSON.parse(data);\n            var hasHeader = Array.isArray(fields) && fields.length > 0;\n            var dataKeyedByField = !Array.isArray(data[0]);\n            // If there a header row, write it first\n            if (hasHeader && _writeHeader) {\n                for(var i = 0; i < fields.length; i++){\n                    if (i > 0) csv += _delimiter;\n                    csv += safe(fields[i], i);\n                }\n                if (data.length > 0) csv += _newline;\n            }\n            // Then write out the data\n            for(var row = 0; row < data.length; row++){\n                var maxCol = hasHeader ? fields.length : data[row].length;\n                var emptyLine = false;\n                var nullLine = hasHeader ? Object.keys(data[row]).length === 0 : data[row].length === 0;\n                if (skipEmptyLines && !hasHeader) {\n                    emptyLine = skipEmptyLines === \"greedy\" ? data[row].join(\"\").trim() === \"\" : data[row].length === 1 && data[row][0].length === 0;\n                }\n                if (skipEmptyLines === \"greedy\" && hasHeader) {\n                    var line = [];\n                    for(var c = 0; c < maxCol; c++){\n                        var cx = dataKeyedByField ? fields[c] : c;\n                        line.push(data[row][cx]);\n                    }\n                    emptyLine = line.join(\"\").trim() === \"\";\n                }\n                if (!emptyLine) {\n                    for(var col = 0; col < maxCol; col++){\n                        if (col > 0 && !nullLine) csv += _delimiter;\n                        var colIdx = hasHeader && dataKeyedByField ? fields[col] : col;\n                        csv += safe(data[row][colIdx], col);\n                    }\n                    if (row < data.length - 1 && (!skipEmptyLines || maxCol > 0 && !nullLine)) {\n                        csv += _newline;\n                    }\n                }\n            }\n            return csv;\n        }\n        /** Encloses a value around quotes if needed (makes a value safe for CSV insertion) */ function safe(str, col) {\n            if (typeof str === \"undefined\" || str === null) return \"\";\n            if (str.constructor === Date) return JSON.stringify(str).slice(1, 25);\n            var needsQuotes = false;\n            if (_escapeFormulae && typeof str === \"string\" && _escapeFormulae.test(str)) {\n                str = \"'\" + str;\n                needsQuotes = true;\n            }\n            var escapedQuoteStr = str.toString().replace(quoteCharRegex, _escapedQuote);\n            needsQuotes = needsQuotes || _quotes === true || typeof _quotes === \"function\" && _quotes(str, col) || Array.isArray(_quotes) && _quotes[col] || hasAny(escapedQuoteStr, Papa.BAD_DELIMITERS) || escapedQuoteStr.indexOf(_delimiter) > -1 || escapedQuoteStr.charAt(0) === \" \" || escapedQuoteStr.charAt(escapedQuoteStr.length - 1) === \" \";\n            return needsQuotes ? _quoteChar + escapedQuoteStr + _quoteChar : escapedQuoteStr;\n        }\n        function hasAny(str, substrings) {\n            for(var i = 0; i < substrings.length; i++)if (str.indexOf(substrings[i]) > -1) return true;\n            return false;\n        }\n    }\n    /** ChunkStreamer is the base prototype for various streamer implementations. */ function ChunkStreamer(config) {\n        this._handle = null;\n        this._finished = false;\n        this._completed = false;\n        this._halted = false;\n        this._input = null;\n        this._baseIndex = 0;\n        this._partialLine = \"\";\n        this._rowCount = 0;\n        this._start = 0;\n        this._nextChunk = null;\n        this.isFirstChunk = true;\n        this._completeResults = {\n            data: [],\n            errors: [],\n            meta: {}\n        };\n        replaceConfig.call(this, config);\n        this.parseChunk = function(chunk, isFakeChunk) {\n            // First chunk pre-processing\n            const skipFirstNLines = parseInt(this._config.skipFirstNLines) || 0;\n            if (this.isFirstChunk && skipFirstNLines > 0) {\n                let _newline = this._config.newline;\n                if (!_newline) {\n                    const quoteChar = this._config.quoteChar || '\"';\n                    _newline = this._handle.guessLineEndings(chunk, quoteChar);\n                }\n                const splitChunk = chunk.split(_newline);\n                chunk = [\n                    ...splitChunk.slice(skipFirstNLines)\n                ].join(_newline);\n            }\n            if (this.isFirstChunk && isFunction(this._config.beforeFirstChunk)) {\n                var modifiedChunk = this._config.beforeFirstChunk(chunk);\n                if (modifiedChunk !== undefined) chunk = modifiedChunk;\n            }\n            this.isFirstChunk = false;\n            this._halted = false;\n            // Rejoin the line we likely just split in two by chunking the file\n            var aggregate = this._partialLine + chunk;\n            this._partialLine = \"\";\n            var results = this._handle.parse(aggregate, this._baseIndex, !this._finished);\n            if (this._handle.paused() || this._handle.aborted()) {\n                this._halted = true;\n                return;\n            }\n            var lastIndex = results.meta.cursor;\n            if (!this._finished) {\n                this._partialLine = aggregate.substring(lastIndex - this._baseIndex);\n                this._baseIndex = lastIndex;\n            }\n            if (results && results.data) this._rowCount += results.data.length;\n            var finishedIncludingPreview = this._finished || this._config.preview && this._rowCount >= this._config.preview;\n            if (IS_PAPA_WORKER) {\n                global.postMessage({\n                    results: results,\n                    workerId: Papa.WORKER_ID,\n                    finished: finishedIncludingPreview\n                });\n            } else if (isFunction(this._config.chunk) && !isFakeChunk) {\n                this._config.chunk(results, this._handle);\n                if (this._handle.paused() || this._handle.aborted()) {\n                    this._halted = true;\n                    return;\n                }\n                results = undefined;\n                this._completeResults = undefined;\n            }\n            if (!this._config.step && !this._config.chunk) {\n                this._completeResults.data = this._completeResults.data.concat(results.data);\n                this._completeResults.errors = this._completeResults.errors.concat(results.errors);\n                this._completeResults.meta = results.meta;\n            }\n            if (!this._completed && finishedIncludingPreview && isFunction(this._config.complete) && (!results || !results.meta.aborted)) {\n                this._config.complete(this._completeResults, this._input);\n                this._completed = true;\n            }\n            if (!finishedIncludingPreview && (!results || !results.meta.paused)) this._nextChunk();\n            return results;\n        };\n        this._sendError = function(error) {\n            if (isFunction(this._config.error)) this._config.error(error);\n            else if (IS_PAPA_WORKER && this._config.error) {\n                global.postMessage({\n                    workerId: Papa.WORKER_ID,\n                    error: error,\n                    finished: false\n                });\n            }\n        };\n        function replaceConfig(config) {\n            // Deep-copy the config so we can edit it\n            var configCopy = copy(config);\n            configCopy.chunkSize = parseInt(configCopy.chunkSize); // parseInt VERY important so we don't concatenate strings!\n            if (!config.step && !config.chunk) configCopy.chunkSize = null; // disable Range header if not streaming; bad values break IIS - see issue #196\n            this._handle = new ParserHandle(configCopy);\n            this._handle.streamer = this;\n            this._config = configCopy; // persist the copy to the caller\n        }\n    }\n    function NetworkStreamer(config) {\n        config = config || {};\n        if (!config.chunkSize) config.chunkSize = Papa.RemoteChunkSize;\n        ChunkStreamer.call(this, config);\n        var xhr;\n        if (IS_WORKER) {\n            this._nextChunk = function() {\n                this._readChunk();\n                this._chunkLoaded();\n            };\n        } else {\n            this._nextChunk = function() {\n                this._readChunk();\n            };\n        }\n        this.stream = function(url) {\n            this._input = url;\n            this._nextChunk(); // Starts streaming\n        };\n        this._readChunk = function() {\n            if (this._finished) {\n                this._chunkLoaded();\n                return;\n            }\n            xhr = new XMLHttpRequest();\n            if (this._config.withCredentials) {\n                xhr.withCredentials = this._config.withCredentials;\n            }\n            if (!IS_WORKER) {\n                xhr.onload = bindFunction(this._chunkLoaded, this);\n                xhr.onerror = bindFunction(this._chunkError, this);\n            }\n            xhr.open(this._config.downloadRequestBody ? \"POST\" : \"GET\", this._input, !IS_WORKER);\n            // Headers can only be set when once the request state is OPENED\n            if (this._config.downloadRequestHeaders) {\n                var headers = this._config.downloadRequestHeaders;\n                for(var headerName in headers){\n                    xhr.setRequestHeader(headerName, headers[headerName]);\n                }\n            }\n            if (this._config.chunkSize) {\n                var end = this._start + this._config.chunkSize - 1; // minus one because byte range is inclusive\n                xhr.setRequestHeader(\"Range\", \"bytes=\" + this._start + \"-\" + end);\n            }\n            try {\n                xhr.send(this._config.downloadRequestBody);\n            } catch (err) {\n                this._chunkError(err.message);\n            }\n            if (IS_WORKER && xhr.status === 0) this._chunkError();\n        };\n        this._chunkLoaded = function() {\n            if (xhr.readyState !== 4) return;\n            if (xhr.status < 200 || xhr.status >= 400) {\n                this._chunkError();\n                return;\n            }\n            // Use chunckSize as it may be a diference on reponse lentgh due to characters with more than 1 byte\n            this._start += this._config.chunkSize ? this._config.chunkSize : xhr.responseText.length;\n            this._finished = !this._config.chunkSize || this._start >= getFileSize(xhr);\n            this.parseChunk(xhr.responseText);\n        };\n        this._chunkError = function(errorMessage) {\n            var errorText = xhr.statusText || errorMessage;\n            this._sendError(new Error(errorText));\n        };\n        function getFileSize(xhr) {\n            var contentRange = xhr.getResponseHeader(\"Content-Range\");\n            if (contentRange === null) {\n                return -1;\n            }\n            return parseInt(contentRange.substring(contentRange.lastIndexOf(\"/\") + 1));\n        }\n    }\n    NetworkStreamer.prototype = Object.create(ChunkStreamer.prototype);\n    NetworkStreamer.prototype.constructor = NetworkStreamer;\n    function FileStreamer(config) {\n        config = config || {};\n        if (!config.chunkSize) config.chunkSize = Papa.LocalChunkSize;\n        ChunkStreamer.call(this, config);\n        var reader, slice;\n        // FileReader is better than FileReaderSync (even in worker) - see http://stackoverflow.com/q/24708649/1048862\n        // But Firefox is a pill, too - see issue #76: https://github.com/mholt/PapaParse/issues/76\n        var usingAsyncReader = typeof FileReader !== \"undefined\"; // Safari doesn't consider it a function - see issue #105\n        this.stream = function(file) {\n            this._input = file;\n            slice = file.slice || file.webkitSlice || file.mozSlice;\n            if (usingAsyncReader) {\n                reader = new FileReader(); // Preferred method of reading files, even in workers\n                reader.onload = bindFunction(this._chunkLoaded, this);\n                reader.onerror = bindFunction(this._chunkError, this);\n            } else reader = new FileReaderSync(); // Hack for running in a web worker in Firefox\n            this._nextChunk(); // Starts streaming\n        };\n        this._nextChunk = function() {\n            if (!this._finished && (!this._config.preview || this._rowCount < this._config.preview)) this._readChunk();\n        };\n        this._readChunk = function() {\n            var input = this._input;\n            if (this._config.chunkSize) {\n                var end = Math.min(this._start + this._config.chunkSize, this._input.size);\n                input = slice.call(input, this._start, end);\n            }\n            var txt = reader.readAsText(input, this._config.encoding);\n            if (!usingAsyncReader) this._chunkLoaded({\n                target: {\n                    result: txt\n                }\n            }); // mimic the async signature\n        };\n        this._chunkLoaded = function(event) {\n            // Very important to increment start each time before handling results\n            this._start += this._config.chunkSize;\n            this._finished = !this._config.chunkSize || this._start >= this._input.size;\n            this.parseChunk(event.target.result);\n        };\n        this._chunkError = function() {\n            this._sendError(reader.error);\n        };\n    }\n    FileStreamer.prototype = Object.create(ChunkStreamer.prototype);\n    FileStreamer.prototype.constructor = FileStreamer;\n    function StringStreamer(config) {\n        config = config || {};\n        ChunkStreamer.call(this, config);\n        var remaining;\n        this.stream = function(s) {\n            remaining = s;\n            return this._nextChunk();\n        };\n        this._nextChunk = function() {\n            if (this._finished) return;\n            var size = this._config.chunkSize;\n            var chunk;\n            if (size) {\n                chunk = remaining.substring(0, size);\n                remaining = remaining.substring(size);\n            } else {\n                chunk = remaining;\n                remaining = \"\";\n            }\n            this._finished = !remaining;\n            return this.parseChunk(chunk);\n        };\n    }\n    StringStreamer.prototype = Object.create(StringStreamer.prototype);\n    StringStreamer.prototype.constructor = StringStreamer;\n    function ReadableStreamStreamer(config) {\n        config = config || {};\n        ChunkStreamer.call(this, config);\n        var queue = [];\n        var parseOnData = true;\n        var streamHasEnded = false;\n        this.pause = function() {\n            ChunkStreamer.prototype.pause.apply(this, arguments);\n            this._input.pause();\n        };\n        this.resume = function() {\n            ChunkStreamer.prototype.resume.apply(this, arguments);\n            this._input.resume();\n        };\n        this.stream = function(stream) {\n            this._input = stream;\n            this._input.on(\"data\", this._streamData);\n            this._input.on(\"end\", this._streamEnd);\n            this._input.on(\"error\", this._streamError);\n        };\n        this._checkIsFinished = function() {\n            if (streamHasEnded && queue.length === 1) {\n                this._finished = true;\n            }\n        };\n        this._nextChunk = function() {\n            this._checkIsFinished();\n            if (queue.length) {\n                this.parseChunk(queue.shift());\n            } else {\n                parseOnData = true;\n            }\n        };\n        this._streamData = bindFunction(function(chunk) {\n            try {\n                queue.push(typeof chunk === \"string\" ? chunk : chunk.toString(this._config.encoding));\n                if (parseOnData) {\n                    parseOnData = false;\n                    this._checkIsFinished();\n                    this.parseChunk(queue.shift());\n                }\n            } catch (error) {\n                this._streamError(error);\n            }\n        }, this);\n        this._streamError = bindFunction(function(error) {\n            this._streamCleanUp();\n            this._sendError(error);\n        }, this);\n        this._streamEnd = bindFunction(function() {\n            this._streamCleanUp();\n            streamHasEnded = true;\n            this._streamData(\"\");\n        }, this);\n        this._streamCleanUp = bindFunction(function() {\n            this._input.removeListener(\"data\", this._streamData);\n            this._input.removeListener(\"end\", this._streamEnd);\n            this._input.removeListener(\"error\", this._streamError);\n        }, this);\n    }\n    ReadableStreamStreamer.prototype = Object.create(ChunkStreamer.prototype);\n    ReadableStreamStreamer.prototype.constructor = ReadableStreamStreamer;\n    function DuplexStreamStreamer(_config) {\n        var Duplex = (__webpack_require__(/*! stream */ \"stream\").Duplex);\n        var config = copy(_config);\n        var parseOnWrite = true;\n        var writeStreamHasFinished = false;\n        var parseCallbackQueue = [];\n        var stream = null;\n        this._onCsvData = function(results) {\n            var data = results.data;\n            if (!stream.push(data) && !this._handle.paused()) {\n                // the writeable consumer buffer has filled up\n                // so we need to pause until more items\n                // can be processed\n                this._handle.pause();\n            }\n        };\n        this._onCsvComplete = function() {\n            // node will finish the read stream when\n            // null is pushed\n            stream.push(null);\n        };\n        config.step = bindFunction(this._onCsvData, this);\n        config.complete = bindFunction(this._onCsvComplete, this);\n        ChunkStreamer.call(this, config);\n        this._nextChunk = function() {\n            if (writeStreamHasFinished && parseCallbackQueue.length === 1) {\n                this._finished = true;\n            }\n            if (parseCallbackQueue.length) {\n                parseCallbackQueue.shift()();\n            } else {\n                parseOnWrite = true;\n            }\n        };\n        this._addToParseQueue = function(chunk, callback) {\n            // add to queue so that we can indicate\n            // completion via callback\n            // node will automatically pause the incoming stream\n            // when too many items have been added without their\n            // callback being invoked\n            parseCallbackQueue.push(bindFunction(function() {\n                this.parseChunk(typeof chunk === \"string\" ? chunk : chunk.toString(config.encoding));\n                if (isFunction(callback)) {\n                    return callback();\n                }\n            }, this));\n            if (parseOnWrite) {\n                parseOnWrite = false;\n                this._nextChunk();\n            }\n        };\n        this._onRead = function() {\n            if (this._handle.paused()) {\n                // the writeable consumer can handle more data\n                // so resume the chunk parsing\n                this._handle.resume();\n            }\n        };\n        this._onWrite = function(chunk, encoding, callback) {\n            this._addToParseQueue(chunk, callback);\n        };\n        this._onWriteComplete = function() {\n            writeStreamHasFinished = true;\n            // have to write empty string\n            // so parser knows its done\n            this._addToParseQueue(\"\");\n        };\n        this.getStream = function() {\n            return stream;\n        };\n        stream = new Duplex({\n            readableObjectMode: true,\n            decodeStrings: false,\n            read: bindFunction(this._onRead, this),\n            write: bindFunction(this._onWrite, this)\n        });\n        stream.once(\"finish\", bindFunction(this._onWriteComplete, this));\n    }\n    if (typeof PAPA_BROWSER_CONTEXT === \"undefined\") {\n        DuplexStreamStreamer.prototype = Object.create(ChunkStreamer.prototype);\n        DuplexStreamStreamer.prototype.constructor = DuplexStreamStreamer;\n    }\n    // Use one ParserHandle per entire CSV file or string\n    function ParserHandle(_config) {\n        // One goal is to minimize the use of regular expressions...\n        var MAX_FLOAT = Math.pow(2, 53);\n        var MIN_FLOAT = -MAX_FLOAT;\n        var FLOAT = /^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/;\n        var ISO_DATE = /^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/;\n        var self1 = this;\n        var _stepCounter = 0; // Number of times step was called (number of rows parsed)\n        var _rowCounter = 0; // Number of rows that have been parsed so far\n        var _input; // The input being parsed\n        var _parser; // The core parser being used\n        var _paused = false; // Whether we are paused or not\n        var _aborted = false; // Whether the parser has aborted or not\n        var _delimiterError; // Temporary state between delimiter detection and processing results\n        var _fields = []; // Fields are from the header row of the input, if there is one\n        var _results = {\n            data: [],\n            errors: [],\n            meta: {}\n        };\n        if (isFunction(_config.step)) {\n            var userStep = _config.step;\n            _config.step = function(results) {\n                _results = results;\n                if (needsHeaderRow()) processResults();\n                else {\n                    processResults();\n                    // It's possbile that this line was empty and there's no row here after all\n                    if (_results.data.length === 0) return;\n                    _stepCounter += results.data.length;\n                    if (_config.preview && _stepCounter > _config.preview) _parser.abort();\n                    else {\n                        _results.data = _results.data[0];\n                        userStep(_results, self1);\n                    }\n                }\n            };\n        }\n        /**\n\t\t * Parses input. Most users won't need, and shouldn't mess with, the baseIndex\n\t\t * and ignoreLastRow parameters. They are used by streamers (wrapper functions)\n\t\t * when an input comes in multiple chunks, like from a file.\n\t\t */ this.parse = function(input, baseIndex, ignoreLastRow) {\n            var quoteChar = _config.quoteChar || '\"';\n            if (!_config.newline) _config.newline = this.guessLineEndings(input, quoteChar);\n            _delimiterError = false;\n            if (!_config.delimiter) {\n                var delimGuess = guessDelimiter(input, _config.newline, _config.skipEmptyLines, _config.comments, _config.delimitersToGuess);\n                if (delimGuess.successful) _config.delimiter = delimGuess.bestDelimiter;\n                else {\n                    _delimiterError = true; // add error after parsing (otherwise it would be overwritten)\n                    _config.delimiter = Papa.DefaultDelimiter;\n                }\n                _results.meta.delimiter = _config.delimiter;\n            } else if (isFunction(_config.delimiter)) {\n                _config.delimiter = _config.delimiter(input);\n                _results.meta.delimiter = _config.delimiter;\n            }\n            var parserConfig = copy(_config);\n            if (_config.preview && _config.header) parserConfig.preview++; // to compensate for header row\n            _input = input;\n            _parser = new Parser(parserConfig);\n            _results = _parser.parse(_input, baseIndex, ignoreLastRow);\n            processResults();\n            return _paused ? {\n                meta: {\n                    paused: true\n                }\n            } : _results || {\n                meta: {\n                    paused: false\n                }\n            };\n        };\n        this.paused = function() {\n            return _paused;\n        };\n        this.pause = function() {\n            _paused = true;\n            _parser.abort();\n            // If it is streaming via \"chunking\", the reader will start appending correctly already so no need to substring,\n            // otherwise we can get duplicate content within a row\n            _input = isFunction(_config.chunk) ? \"\" : _input.substring(_parser.getCharIndex());\n        };\n        this.resume = function() {\n            if (self1.streamer._halted) {\n                _paused = false;\n                self1.streamer.parseChunk(_input, true);\n            } else {\n                // Bugfix: #636 In case the processing hasn't halted yet\n                // wait for it to halt in order to resume\n                setTimeout(self1.resume, 3);\n            }\n        };\n        this.aborted = function() {\n            return _aborted;\n        };\n        this.abort = function() {\n            _aborted = true;\n            _parser.abort();\n            _results.meta.aborted = true;\n            if (isFunction(_config.complete)) _config.complete(_results);\n            _input = \"\";\n        };\n        this.guessLineEndings = function(input, quoteChar) {\n            input = input.substring(0, 1024 * 1024); // max length 1 MB\n            // Replace all the text inside quotes\n            var re = new RegExp(escapeRegExp(quoteChar) + \"([^]*?)\" + escapeRegExp(quoteChar), \"gm\");\n            input = input.replace(re, \"\");\n            var r = input.split(\"\\r\");\n            var n = input.split(\"\\n\");\n            var nAppearsFirst = n.length > 1 && n[0].length < r[0].length;\n            if (r.length === 1 || nAppearsFirst) return \"\\n\";\n            var numWithN = 0;\n            for(var i = 0; i < r.length; i++){\n                if (r[i][0] === \"\\n\") numWithN++;\n            }\n            return numWithN >= r.length / 2 ? \"\\r\\n\" : \"\\r\";\n        };\n        function testEmptyLine(s) {\n            return _config.skipEmptyLines === \"greedy\" ? s.join(\"\").trim() === \"\" : s.length === 1 && s[0].length === 0;\n        }\n        function testFloat(s) {\n            if (FLOAT.test(s)) {\n                var floatValue = parseFloat(s);\n                if (floatValue > MIN_FLOAT && floatValue < MAX_FLOAT) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function processResults() {\n            if (_results && _delimiterError) {\n                addError(\"Delimiter\", \"UndetectableDelimiter\", \"Unable to auto-detect delimiting character; defaulted to '\" + Papa.DefaultDelimiter + \"'\");\n                _delimiterError = false;\n            }\n            if (_config.skipEmptyLines) {\n                _results.data = _results.data.filter(function(d) {\n                    return !testEmptyLine(d);\n                });\n            }\n            if (needsHeaderRow()) fillHeaderFields();\n            return applyHeaderAndDynamicTypingAndTransformation();\n        }\n        function needsHeaderRow() {\n            return _config.header && _fields.length === 0;\n        }\n        function fillHeaderFields() {\n            if (!_results) return;\n            function addHeader(header, i) {\n                if (isFunction(_config.transformHeader)) header = _config.transformHeader(header, i);\n                _fields.push(header);\n            }\n            if (Array.isArray(_results.data[0])) {\n                for(var i = 0; needsHeaderRow() && i < _results.data.length; i++)_results.data[i].forEach(addHeader);\n                _results.data.splice(0, 1);\n            } else _results.data.forEach(addHeader);\n        }\n        function shouldApplyDynamicTyping(field) {\n            // Cache function values to avoid calling it for each row\n            if (_config.dynamicTypingFunction && _config.dynamicTyping[field] === undefined) {\n                _config.dynamicTyping[field] = _config.dynamicTypingFunction(field);\n            }\n            return (_config.dynamicTyping[field] || _config.dynamicTyping) === true;\n        }\n        function parseDynamic(field, value) {\n            if (shouldApplyDynamicTyping(field)) {\n                if (value === \"true\" || value === \"TRUE\") return true;\n                else if (value === \"false\" || value === \"FALSE\") return false;\n                else if (testFloat(value)) return parseFloat(value);\n                else if (ISO_DATE.test(value)) return new Date(value);\n                else return value === \"\" ? null : value;\n            }\n            return value;\n        }\n        function applyHeaderAndDynamicTypingAndTransformation() {\n            if (!_results || !_config.header && !_config.dynamicTyping && !_config.transform) return _results;\n            function processRow(rowSource, i) {\n                var row = _config.header ? {} : [];\n                var j;\n                for(j = 0; j < rowSource.length; j++){\n                    var field = j;\n                    var value = rowSource[j];\n                    if (_config.header) field = j >= _fields.length ? \"__parsed_extra\" : _fields[j];\n                    if (_config.transform) value = _config.transform(value, field);\n                    value = parseDynamic(field, value);\n                    if (field === \"__parsed_extra\") {\n                        row[field] = row[field] || [];\n                        row[field].push(value);\n                    } else row[field] = value;\n                }\n                if (_config.header) {\n                    if (j > _fields.length) addError(\"FieldMismatch\", \"TooManyFields\", \"Too many fields: expected \" + _fields.length + \" fields but parsed \" + j, _rowCounter + i);\n                    else if (j < _fields.length) addError(\"FieldMismatch\", \"TooFewFields\", \"Too few fields: expected \" + _fields.length + \" fields but parsed \" + j, _rowCounter + i);\n                }\n                return row;\n            }\n            var incrementBy = 1;\n            if (!_results.data.length || Array.isArray(_results.data[0])) {\n                _results.data = _results.data.map(processRow);\n                incrementBy = _results.data.length;\n            } else _results.data = processRow(_results.data, 0);\n            if (_config.header && _results.meta) _results.meta.fields = _fields;\n            _rowCounter += incrementBy;\n            return _results;\n        }\n        function guessDelimiter(input, newline, skipEmptyLines, comments, delimitersToGuess) {\n            var bestDelim, bestDelta, fieldCountPrevRow, maxFieldCount;\n            delimitersToGuess = delimitersToGuess || [\n                \",\",\n                \"\t\",\n                \"|\",\n                \";\",\n                Papa.RECORD_SEP,\n                Papa.UNIT_SEP\n            ];\n            for(var i = 0; i < delimitersToGuess.length; i++){\n                var delim = delimitersToGuess[i];\n                var delta = 0, avgFieldCount = 0, emptyLinesCount = 0;\n                fieldCountPrevRow = undefined;\n                var preview = new Parser({\n                    comments: comments,\n                    delimiter: delim,\n                    newline: newline,\n                    preview: 10\n                }).parse(input);\n                for(var j = 0; j < preview.data.length; j++){\n                    if (skipEmptyLines && testEmptyLine(preview.data[j])) {\n                        emptyLinesCount++;\n                        continue;\n                    }\n                    var fieldCount = preview.data[j].length;\n                    avgFieldCount += fieldCount;\n                    if (typeof fieldCountPrevRow === \"undefined\") {\n                        fieldCountPrevRow = fieldCount;\n                        continue;\n                    } else if (fieldCount > 0) {\n                        delta += Math.abs(fieldCount - fieldCountPrevRow);\n                        fieldCountPrevRow = fieldCount;\n                    }\n                }\n                if (preview.data.length > 0) avgFieldCount /= preview.data.length - emptyLinesCount;\n                if ((typeof bestDelta === \"undefined\" || delta <= bestDelta) && (typeof maxFieldCount === \"undefined\" || avgFieldCount > maxFieldCount) && avgFieldCount > 1.99) {\n                    bestDelta = delta;\n                    bestDelim = delim;\n                    maxFieldCount = avgFieldCount;\n                }\n            }\n            _config.delimiter = bestDelim;\n            return {\n                successful: !!bestDelim,\n                bestDelimiter: bestDelim\n            };\n        }\n        function addError(type, code, msg, row) {\n            var error = {\n                type: type,\n                code: code,\n                message: msg\n            };\n            if (row !== undefined) {\n                error.row = row;\n            }\n            _results.errors.push(error);\n        }\n    }\n    /** https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions */ function escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n    }\n    /** The core parser implements speedy and correct CSV parsing */ function Parser(config) {\n        // Unpack the config object\n        config = config || {};\n        var delim = config.delimiter;\n        var newline = config.newline;\n        var comments = config.comments;\n        var step = config.step;\n        var preview = config.preview;\n        var fastMode = config.fastMode;\n        var quoteChar;\n        var renamedHeaders = null;\n        var headerParsed = false;\n        if (config.quoteChar === undefined || config.quoteChar === null) {\n            quoteChar = '\"';\n        } else {\n            quoteChar = config.quoteChar;\n        }\n        var escapeChar = quoteChar;\n        if (config.escapeChar !== undefined) {\n            escapeChar = config.escapeChar;\n        }\n        // Delimiter must be valid\n        if (typeof delim !== \"string\" || Papa.BAD_DELIMITERS.indexOf(delim) > -1) delim = \",\";\n        // Comment character must be valid\n        if (comments === delim) throw new Error(\"Comment character same as delimiter\");\n        else if (comments === true) comments = \"#\";\n        else if (typeof comments !== \"string\" || Papa.BAD_DELIMITERS.indexOf(comments) > -1) comments = false;\n        // Newline must be valid: \\r, \\n, or \\r\\n\n        if (newline !== \"\\n\" && newline !== \"\\r\" && newline !== \"\\r\\n\") newline = \"\\n\";\n        // We're gonna need these at the Parser scope\n        var cursor = 0;\n        var aborted = false;\n        this.parse = function(input, baseIndex, ignoreLastRow) {\n            // For some reason, in Chrome, this speeds things up (!?)\n            if (typeof input !== \"string\") throw new Error(\"Input must be a string\");\n            // We don't need to compute some of these every time parse() is called,\n            // but having them in a more local scope seems to perform better\n            var inputLen = input.length, delimLen = delim.length, newlineLen = newline.length, commentsLen = comments.length;\n            var stepIsFunction = isFunction(step);\n            // Establish starting state\n            cursor = 0;\n            var data = [], errors = [], row = [], lastCursor = 0;\n            if (!input) return returnable();\n            if (fastMode || fastMode !== false && input.indexOf(quoteChar) === -1) {\n                var rows = input.split(newline);\n                for(var i = 0; i < rows.length; i++){\n                    row = rows[i];\n                    cursor += row.length;\n                    if (i !== rows.length - 1) cursor += newline.length;\n                    else if (ignoreLastRow) return returnable();\n                    if (comments && row.substring(0, commentsLen) === comments) continue;\n                    if (stepIsFunction) {\n                        data = [];\n                        pushRow(row.split(delim));\n                        doStep();\n                        if (aborted) return returnable();\n                    } else pushRow(row.split(delim));\n                    if (preview && i >= preview) {\n                        data = data.slice(0, preview);\n                        return returnable(true);\n                    }\n                }\n                return returnable();\n            }\n            var nextDelim = input.indexOf(delim, cursor);\n            var nextNewline = input.indexOf(newline, cursor);\n            var quoteCharRegex = new RegExp(escapeRegExp(escapeChar) + escapeRegExp(quoteChar), \"g\");\n            var quoteSearch = input.indexOf(quoteChar, cursor);\n            // Parser loop\n            for(;;){\n                // Field has opening quote\n                if (input[cursor] === quoteChar) {\n                    // Start our search for the closing quote where the cursor is\n                    quoteSearch = cursor;\n                    // Skip the opening quote\n                    cursor++;\n                    for(;;){\n                        // Find closing quote\n                        quoteSearch = input.indexOf(quoteChar, quoteSearch + 1);\n                        //No other quotes are found - no other delimiters\n                        if (quoteSearch === -1) {\n                            if (!ignoreLastRow) {\n                                // No closing quote... what a pity\n                                errors.push({\n                                    type: \"Quotes\",\n                                    code: \"MissingQuotes\",\n                                    message: \"Quoted field unterminated\",\n                                    row: data.length,\n                                    index: cursor\n                                });\n                            }\n                            return finish();\n                        }\n                        // Closing quote at EOF\n                        if (quoteSearch === inputLen - 1) {\n                            var value = input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar);\n                            return finish(value);\n                        }\n                        // If this quote is escaped, it's part of the data; skip it\n                        // If the quote character is the escape character, then check if the next character is the escape character\n                        if (quoteChar === escapeChar && input[quoteSearch + 1] === escapeChar) {\n                            quoteSearch++;\n                            continue;\n                        }\n                        // If the quote character is not the escape character, then check if the previous character was the escape character\n                        if (quoteChar !== escapeChar && quoteSearch !== 0 && input[quoteSearch - 1] === escapeChar) {\n                            continue;\n                        }\n                        if (nextDelim !== -1 && nextDelim < quoteSearch + 1) {\n                            nextDelim = input.indexOf(delim, quoteSearch + 1);\n                        }\n                        if (nextNewline !== -1 && nextNewline < quoteSearch + 1) {\n                            nextNewline = input.indexOf(newline, quoteSearch + 1);\n                        }\n                        // Check up to nextDelim or nextNewline, whichever is closest\n                        var checkUpTo = nextNewline === -1 ? nextDelim : Math.min(nextDelim, nextNewline);\n                        var spacesBetweenQuoteAndDelimiter = extraSpaces(checkUpTo);\n                        // Closing quote followed by delimiter or 'unnecessary spaces + delimiter'\n                        if (input.substr(quoteSearch + 1 + spacesBetweenQuoteAndDelimiter, delimLen) === delim) {\n                            row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));\n                            cursor = quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen;\n                            // If char after following delimiter is not quoteChar, we find next quote char position\n                            if (input[quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen] !== quoteChar) {\n                                quoteSearch = input.indexOf(quoteChar, cursor);\n                            }\n                            nextDelim = input.indexOf(delim, cursor);\n                            nextNewline = input.indexOf(newline, cursor);\n                            break;\n                        }\n                        var spacesBetweenQuoteAndNewLine = extraSpaces(nextNewline);\n                        // Closing quote followed by newline or 'unnecessary spaces + newLine'\n                        if (input.substring(quoteSearch + 1 + spacesBetweenQuoteAndNewLine, quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen) === newline) {\n                            row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));\n                            saveRow(quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen);\n                            nextDelim = input.indexOf(delim, cursor); // because we may have skipped the nextDelim in the quoted field\n                            quoteSearch = input.indexOf(quoteChar, cursor); // we search for first quote in next line\n                            if (stepIsFunction) {\n                                doStep();\n                                if (aborted) return returnable();\n                            }\n                            if (preview && data.length >= preview) return returnable(true);\n                            break;\n                        }\n                        // Checks for valid closing quotes are complete (escaped quotes or quote followed by EOF/delimiter/newline) -- assume these quotes are part of an invalid text string\n                        errors.push({\n                            type: \"Quotes\",\n                            code: \"InvalidQuotes\",\n                            message: \"Trailing quote on quoted field is malformed\",\n                            row: data.length,\n                            index: cursor\n                        });\n                        quoteSearch++;\n                        continue;\n                    }\n                    continue;\n                }\n                // Comment found at start of new line\n                if (comments && row.length === 0 && input.substring(cursor, cursor + commentsLen) === comments) {\n                    if (nextNewline === -1) return returnable();\n                    cursor = nextNewline + newlineLen;\n                    nextNewline = input.indexOf(newline, cursor);\n                    nextDelim = input.indexOf(delim, cursor);\n                    continue;\n                }\n                // Next delimiter comes before next newline, so we've reached end of field\n                if (nextDelim !== -1 && (nextDelim < nextNewline || nextNewline === -1)) {\n                    row.push(input.substring(cursor, nextDelim));\n                    cursor = nextDelim + delimLen;\n                    // we look for next delimiter char\n                    nextDelim = input.indexOf(delim, cursor);\n                    continue;\n                }\n                // End of row\n                if (nextNewline !== -1) {\n                    row.push(input.substring(cursor, nextNewline));\n                    saveRow(nextNewline + newlineLen);\n                    if (stepIsFunction) {\n                        doStep();\n                        if (aborted) return returnable();\n                    }\n                    if (preview && data.length >= preview) return returnable(true);\n                    continue;\n                }\n                break;\n            }\n            return finish();\n            function pushRow(row) {\n                data.push(row);\n                lastCursor = cursor;\n            }\n            /**\n             * checks if there are extra spaces after closing quote and given index without any text\n             * if Yes, returns the number of spaces\n             */ function extraSpaces(index) {\n                var spaceLength = 0;\n                if (index !== -1) {\n                    var textBetweenClosingQuoteAndIndex = input.substring(quoteSearch + 1, index);\n                    if (textBetweenClosingQuoteAndIndex && textBetweenClosingQuoteAndIndex.trim() === \"\") {\n                        spaceLength = textBetweenClosingQuoteAndIndex.length;\n                    }\n                }\n                return spaceLength;\n            }\n            /**\n\t\t\t * Appends the remaining input from cursor to the end into\n\t\t\t * row, saves the row, calls step, and returns the results.\n\t\t\t */ function finish(value) {\n                if (ignoreLastRow) return returnable();\n                if (typeof value === \"undefined\") value = input.substring(cursor);\n                row.push(value);\n                cursor = inputLen; // important in case parsing is paused\n                pushRow(row);\n                if (stepIsFunction) doStep();\n                return returnable();\n            }\n            /**\n\t\t\t * Appends the current row to the results. It sets the cursor\n\t\t\t * to newCursor and finds the nextNewline. The caller should\n\t\t\t * take care to execute user's step function and check for\n\t\t\t * preview and end parsing if necessary.\n\t\t\t */ function saveRow(newCursor) {\n                cursor = newCursor;\n                pushRow(row);\n                row = [];\n                nextNewline = input.indexOf(newline, cursor);\n            }\n            /** Returns an object with the results, errors, and meta. */ function returnable(stopped) {\n                if (config.header && !baseIndex && data.length && !headerParsed) {\n                    const result = data[0];\n                    const headerCount = Object.create(null); // To track the count of each base header\n                    const usedHeaders = new Set(result); // To track used headers and avoid duplicates\n                    let duplicateHeaders = false;\n                    for(let i = 0; i < result.length; i++){\n                        let header = result[i];\n                        if (isFunction(config.transformHeader)) header = config.transformHeader(header, i);\n                        if (!headerCount[header]) {\n                            headerCount[header] = 1;\n                            result[i] = header;\n                        } else {\n                            let newHeader;\n                            let suffixCount = headerCount[header];\n                            // Find a unique new header\n                            do {\n                                newHeader = `${header}_${suffixCount}`;\n                                suffixCount++;\n                            }while (usedHeaders.has(newHeader));\n                            usedHeaders.add(newHeader); // Mark this new Header as used\n                            result[i] = newHeader;\n                            headerCount[header]++;\n                            duplicateHeaders = true;\n                            if (renamedHeaders === null) {\n                                renamedHeaders = {};\n                            }\n                            renamedHeaders[newHeader] = header;\n                        }\n                        usedHeaders.add(header); // Ensure the original header is marked as used\n                    }\n                    if (duplicateHeaders) {\n                        console.warn(\"Duplicate headers found and renamed.\");\n                    }\n                    headerParsed = true;\n                }\n                return {\n                    data: data,\n                    errors: errors,\n                    meta: {\n                        delimiter: delim,\n                        linebreak: newline,\n                        aborted: aborted,\n                        truncated: !!stopped,\n                        cursor: lastCursor + (baseIndex || 0),\n                        renamedHeaders: renamedHeaders\n                    }\n                };\n            }\n            /** Executes the user's step function and resets data & errors. */ function doStep() {\n                step(returnable());\n                data = [];\n                errors = [];\n            }\n        };\n        /** Sets the abort flag */ this.abort = function() {\n            aborted = true;\n        };\n        /** Gets the cursor position */ this.getCharIndex = function() {\n            return cursor;\n        };\n    }\n    function newWorker() {\n        if (!Papa.WORKERS_SUPPORTED) return false;\n        var workerUrl = getWorkerBlob();\n        var w = new global.Worker(workerUrl);\n        w.onmessage = mainThreadReceivedMessage;\n        w.id = workerIdCounter++;\n        workers[w.id] = w;\n        return w;\n    }\n    /** Callback when main thread receives a message */ function mainThreadReceivedMessage(e) {\n        var msg = e.data;\n        var worker = workers[msg.workerId];\n        var aborted = false;\n        if (msg.error) worker.userError(msg.error, msg.file);\n        else if (msg.results && msg.results.data) {\n            var abort = function() {\n                aborted = true;\n                completeWorker(msg.workerId, {\n                    data: [],\n                    errors: [],\n                    meta: {\n                        aborted: true\n                    }\n                });\n            };\n            var handle = {\n                abort: abort,\n                pause: notImplemented,\n                resume: notImplemented\n            };\n            if (isFunction(worker.userStep)) {\n                for(var i = 0; i < msg.results.data.length; i++){\n                    worker.userStep({\n                        data: msg.results.data[i],\n                        errors: msg.results.errors,\n                        meta: msg.results.meta\n                    }, handle);\n                    if (aborted) break;\n                }\n                delete msg.results; // free memory ASAP\n            } else if (isFunction(worker.userChunk)) {\n                worker.userChunk(msg.results, handle, msg.file);\n                delete msg.results;\n            }\n        }\n        if (msg.finished && !aborted) completeWorker(msg.workerId, msg.results);\n    }\n    function completeWorker(workerId, results) {\n        var worker = workers[workerId];\n        if (isFunction(worker.userComplete)) worker.userComplete(results);\n        worker.terminate();\n        delete workers[workerId];\n    }\n    function notImplemented() {\n        throw new Error(\"Not implemented.\");\n    }\n    /** Callback when worker thread receives a message */ function workerThreadReceivedMessage(e) {\n        var msg = e.data;\n        if (typeof Papa.WORKER_ID === \"undefined\" && msg) Papa.WORKER_ID = msg.workerId;\n        if (typeof msg.input === \"string\") {\n            global.postMessage({\n                workerId: Papa.WORKER_ID,\n                results: Papa.parse(msg.input, msg.config),\n                finished: true\n            });\n        } else if (global.File && msg.input instanceof File || msg.input instanceof Object) {\n            var results = Papa.parse(msg.input, msg.config);\n            if (results) global.postMessage({\n                workerId: Papa.WORKER_ID,\n                results: results,\n                finished: true\n            });\n        }\n    }\n    /** Makes a deep copy of an array or object (mostly) */ function copy(obj) {\n        if (typeof obj !== \"object\" || obj === null) return obj;\n        var cpy = Array.isArray(obj) ? [] : {};\n        for(var key in obj)cpy[key] = copy(obj[key]);\n        return cpy;\n    }\n    function bindFunction(f, self1) {\n        return function() {\n            f.apply(self1, arguments);\n        };\n    }\n    function isFunction(func) {\n        return typeof func === \"function\";\n    }\n    return Papa;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGFwYXBhcnNlL3BhcGFwYXJzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQSxHQUVDLFVBQVNBLElBQUksRUFBRUMsT0FBTztJQUV0QixrQkFBa0IsR0FDbEIsSUFBSSxJQUEwQyxFQUM5QztRQUNDLHdDQUF3QztRQUN4Q0MsaUNBQU8sRUFBRSxvQ0FBRUQsT0FBT0E7QUFBQTtBQUFBO0FBQUEsa0dBQUNBO0lBQ3BCLE9BQ0ssRUFXSjtBQUNELG9GQUFvRjtBQUNwRixtREFBbUQ7QUFDbkQscUNBQXFDO0FBQ3RDLEdBQUUsSUFBSSxFQUFFLFNBQVNNO0lBRWhCO0lBRUEsSUFBSUMsU0FBUztRQUNaLDZEQUE2RDtRQUM3RCxtREFBbUQ7UUFDbkQsa0NBQWtDO1FBRWxDLElBQUksT0FBT0MsU0FBUyxhQUFhO1lBQUUsT0FBT0E7UUFBTTtRQUNoRCxJQUFJLEtBQWtCLEVBQWEsRUFBa0I7UUFDckQsSUFBSSxPQUFPRCxXQUFXLGFBQWE7WUFBRSxPQUFPQTtRQUFRO1FBRXBELHlEQUF5RDtRQUN6RCxPQUFPLENBQUM7SUFDVDtJQUdBLFNBQVNHO1FBQ1IsSUFBSUMsTUFBTUosT0FBT0ksR0FBRyxJQUFJSixPQUFPSyxTQUFTLElBQUk7UUFDNUMsSUFBSUMsT0FBT1AsY0FBY1EsUUFBUTtRQUNqQyxPQUFPVCxLQUFLVSxRQUFRLElBQUtWLENBQUFBLEtBQUtVLFFBQVEsR0FBR0osSUFBSUssZUFBZSxDQUFDLElBQUlDLEtBQUs7WUFBQztZQUEwTztZQUFLSjtZQUFNO1NBQU8sRUFBRTtZQUFDSyxNQUFNO1FBQWlCLEdBQUU7SUFDaFc7SUFFQSxJQUFJQyxZQUFZLENBQUNaLE9BQU9hLFFBQVEsSUFBSSxDQUFDLENBQUNiLE9BQU9jLFdBQVcsRUFDdkRDLGlCQUFpQmYsT0FBT2UsY0FBYyxJQUFJO0lBRTNDLElBQUlDLFVBQVUsQ0FBQyxHQUFHQyxrQkFBa0I7SUFFcEMsSUFBSW5CLE9BQU8sQ0FBQztJQUVaQSxLQUFLb0Is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TUMsT0FBTyxDQUFDK1EsT0FBTyxFQUFFLEdBQUcsQ0FBQztRQUNyQyxJQUFLLElBQUlFLE9BQU9GLElBQ2ZDLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHOUwsS0FBSzRMLEdBQUcsQ0FBQ0UsSUFBSTtRQUN6QixPQUFPRDtJQUNSO0lBRUEsU0FBU3BMLGFBQWF2SixDQUFDLEVBQUVsRSxLQUFJO1FBRTVCLE9BQU87WUFBYWtFLEVBQUVtTSxLQUFLLENBQUNyUSxPQUFNc1E7UUFBWTtJQUMvQztJQUNBLFNBQVN0TSxXQUFXK1UsSUFBSTtRQUV2QixPQUFPLE9BQU9BLFNBQVM7SUFDeEI7SUFFQSxPQUFPbFo7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy0xMy1yZXBsaXQvLi9ub2RlX21vZHVsZXMvcGFwYXBhcnNlL3BhcGFwYXJzZS5qcz85YmY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIEBsaWNlbnNlXG5QYXBhIFBhcnNlXG52NS41LjNcbmh0dHBzOi8vZ2l0aHViLmNvbS9taG9sdC9QYXBhUGFyc2VcbkxpY2Vuc2U6IE1JVFxuKi9cblxuKGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpXG57XG5cdC8qIGdsb2JhbHMgZGVmaW5lICovXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdHtcblx0XHQvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpXG5cdHtcblx0XHQvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcblx0XHQvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcblx0XHQvLyBsaWtlIE5vZGUuXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH1cblx0ZWxzZVxuXHR7XG5cdFx0Ly8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcblx0XHRyb290LlBhcGEgPSBmYWN0b3J5KCk7XG5cdH1cblx0Ly8gaW4gc3RyaWN0IG1vZGUgd2UgY2Fubm90IGFjY2VzcyBhcmd1bWVudHMuY2FsbGVlLCBzbyB3ZSBuZWVkIGEgbmFtZWQgcmVmZXJlbmNlIHRvXG5cdC8vIHN0cmluZ2lmeSB0aGUgZmFjdG9yeSBtZXRob2QgZm9yIHRoZSBibG9iIHdvcmtlclxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lXG59KHRoaXMsIGZ1bmN0aW9uIG1vZHVsZUZhY3RvcnkoKVxue1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGdsb2JhbCA9IChmdW5jdGlvbigpIHtcblx0XHQvLyBhbHRlcm5hdGl2ZSBtZXRob2QsIHNpbWlsYXIgdG8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG5cdFx0Ly8gYnV0IHdpdGhvdXQgdXNpbmcgYGV2YWxgICh3aGljaCBpcyBkaXNhYmxlZCB3aGVuXG5cdFx0Ly8gdXNpbmcgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuXG5cdFx0aWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gc2VsZjsgfVxuXHRcdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG5cdFx0aWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cblxuXHRcdC8vIFdoZW4gcnVubmluZyB0ZXN0cyBub25lIG9mIHRoZSBhYm92ZSBoYXZlIGJlZW4gZGVmaW5lZFxuXHRcdHJldHVybiB7fTtcblx0fSkoKTtcblxuXG5cdGZ1bmN0aW9uIGdldFdvcmtlckJsb2IoKSB7XG5cdFx0dmFyIFVSTCA9IGdsb2JhbC5VUkwgfHwgZ2xvYmFsLndlYmtpdFVSTCB8fCBudWxsO1xuXHRcdHZhciBjb2RlID0gbW9kdWxlRmFjdG9yeS50b1N0cmluZygpO1xuXHRcdHJldHVybiBQYXBhLkJMT0JfVVJMIHx8IChQYXBhLkJMT0JfVVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbXCJ2YXIgZ2xvYmFsID0gKGZ1bmN0aW9uKCkgeyBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBzZWxmOyB9IGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9IGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZ2xvYmFsOyB9IHJldHVybiB7fTsgfSkoKTsgZ2xvYmFsLklTX1BBUEFfV09SS0VSPXRydWU7IFwiLCAnKCcsIGNvZGUsICcpKCk7J10sIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pKSk7XG5cdH1cblxuXHR2YXIgSVNfV09SS0VSID0gIWdsb2JhbC5kb2N1bWVudCAmJiAhIWdsb2JhbC5wb3N0TWVzc2FnZSxcblx0XHRJU19QQVBBX1dPUktFUiA9IGdsb2JhbC5JU19QQVBBX1dPUktFUiB8fCBmYWxzZTtcblxuXHR2YXIgd29ya2VycyA9IHt9LCB3b3JrZXJJZENvdW50ZXIgPSAwO1xuXG5cdHZhciBQYXBhID0ge307XG5cblx0UGFwYS5wYXJzZSA9IENzdlRvSnNvbjtcblx0UGFwYS51bnBhcnNlID0gSnNvblRvQ3N2O1xuXG5cdFBhcGEuUkVDT1JEX1NFUCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMzApO1xuXHRQYXBhLlVOSVRfU0VQID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMSk7XG5cdFBhcGEuQllURV9PUkRFUl9NQVJLID0gJ1xcdWZlZmYnO1xuXHRQYXBhLkJBRF9ERUxJTUlURVJTID0gWydcXHInLCAnXFxuJywgJ1wiJywgUGFwYS5CWVRFX09SREVSX01BUktdO1xuXHRQYXBhLldPUktFUlNfU1VQUE9SVEVEID0gIUlTX1dPUktFUiAmJiAhIWdsb2JhbC5Xb3JrZXI7XG5cdFBhcGEuTk9ERV9TVFJFQU1fSU5QVVQgPSAxO1xuXG5cdC8vIENvbmZpZ3VyYWJsZSBjaHVuayBzaXplcyBmb3IgbG9jYWwgYW5kIHJlbW90ZSBmaWxlcywgcmVzcGVjdGl2ZWx5XG5cdFBhcGEuTG9jYWxDaHVua1NpemUgPSAxMDI0ICogMTAyNCAqIDEwO1x0Ly8gMTAgTUJcblx0UGFwYS5SZW1vdGVDaHVua1NpemUgPSAxMDI0ICogMTAyNCAqIDU7XHQvLyA1IE1CXG5cdFBhcGEuRGVmYXVsdERlbGltaXRlciA9ICcsJztcdFx0XHQvLyBVc2VkIGlmIG5vdCBzcGVjaWZpZWQgYW5kIGRldGVjdGlvbiBmYWlsc1xuXG5cdC8vIEV4cG9zZWQgZm9yIHRlc3RpbmcgYW5kIGRldmVsb3BtZW50IG9ubHlcblx0UGFwYS5QYXJzZXIgPSBQYXJzZXI7XG5cdFBhcGEuUGFyc2VySGFuZGxlID0gUGFyc2VySGFuZGxlO1xuXHRQYXBhLk5ldHdvcmtTdHJlYW1lciA9IE5ldHdvcmtTdHJlYW1lcjtcblx0UGFwYS5GaWxlU3RyZWFtZXIgPSBGaWxlU3RyZWFtZXI7XG5cdFBhcGEuU3RyaW5nU3RyZWFtZXIgPSBTdHJpbmdTdHJlYW1lcjtcblx0UGFwYS5SZWFkYWJsZVN0cmVhbVN0cmVhbWVyID0gUmVhZGFibGVTdHJlYW1TdHJlYW1lcjtcblx0aWYgKHR5cGVvZiBQQVBBX0JST1dTRVJfQ09OVEVYVCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRQYXBhLkR1cGxleFN0cmVhbVN0cmVhbWVyID0gRHVwbGV4U3RyZWFtU3RyZWFtZXI7XG5cdH1cblxuXHRpZiAoZ2xvYmFsLmpRdWVyeSlcblx0e1xuXHRcdHZhciAkID0gZ2xvYmFsLmpRdWVyeTtcblx0XHQkLmZuLnBhcnNlID0gZnVuY3Rpb24ob3B0aW9ucylcblx0XHR7XG5cdFx0XHR2YXIgY29uZmlnID0gb3B0aW9ucy5jb25maWcgfHwge307XG5cdFx0XHR2YXIgcXVldWUgPSBbXTtcblxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKGlkeClcblx0XHRcdHtcblx0XHRcdFx0dmFyIHN1cHBvcnRlZCA9ICQodGhpcykucHJvcCgndGFnTmFtZScpLnRvVXBwZXJDYXNlKCkgPT09ICdJTlBVVCdcblx0XHRcdFx0XHRcdFx0XHQmJiAkKHRoaXMpLmF0dHIoJ3R5cGUnKS50b0xvd2VyQ2FzZSgpID09PSAnZmlsZSdcblx0XHRcdFx0XHRcdFx0XHQmJiBnbG9iYWwuRmlsZVJlYWRlcjtcblxuXHRcdFx0XHRpZiAoIXN1cHBvcnRlZCB8fCAhdGhpcy5maWxlcyB8fCB0aGlzLmZpbGVzLmxlbmd0aCA9PT0gMClcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcdC8vIGNvbnRpbnVlIHRvIG5leHQgaW5wdXQgZWxlbWVudFxuXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maWxlcy5sZW5ndGg7IGkrKylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdFx0ZmlsZTogdGhpcy5maWxlc1tpXSxcblx0XHRcdFx0XHRcdGlucHV0RWxlbTogdGhpcyxcblx0XHRcdFx0XHRcdGluc3RhbmNlQ29uZmlnOiAkLmV4dGVuZCh7fSwgY29uZmlnKVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cGFyc2VOZXh0RmlsZSgpO1x0Ly8gYmVnaW4gcGFyc2luZ1xuXHRcdFx0cmV0dXJuIHRoaXM7XHRcdC8vIG1haW50YWlucyBjaGFpbmFiaWxpdHlcblxuXG5cdFx0XHRmdW5jdGlvbiBwYXJzZU5leHRGaWxlKClcblx0XHRcdHtcblx0XHRcdFx0aWYgKHF1ZXVlLmxlbmd0aCA9PT0gMClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuY29tcGxldGUpKVxuXHRcdFx0XHRcdFx0b3B0aW9ucy5jb21wbGV0ZSgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBmID0gcXVldWVbMF07XG5cblx0XHRcdFx0aWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5iZWZvcmUpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIHJldHVybmVkID0gb3B0aW9ucy5iZWZvcmUoZi5maWxlLCBmLmlucHV0RWxlbSk7XG5cblx0XHRcdFx0XHRpZiAodHlwZW9mIHJldHVybmVkID09PSAnb2JqZWN0Jylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpZiAocmV0dXJuZWQuYWN0aW9uID09PSAnYWJvcnQnKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRlcnJvcignQWJvcnRFcnJvcicsIGYuZmlsZSwgZi5pbnB1dEVsZW0sIHJldHVybmVkLnJlYXNvbik7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcdC8vIEFib3J0cyBhbGwgcXVldWVkIGZpbGVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIGlmIChyZXR1cm5lZC5hY3Rpb24gPT09ICdza2lwJylcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0ZmlsZUNvbXBsZXRlKCk7XHQvLyBwYXJzZSB0aGUgbmV4dCBmaWxlIGluIHRoZSBxdWV1ZSwgaWYgYW55XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiByZXR1cm5lZC5jb25maWcgPT09ICdvYmplY3QnKVxuXHRcdFx0XHRcdFx0XHRmLmluc3RhbmNlQ29uZmlnID0gJC5leHRlbmQoZi5pbnN0YW5jZUNvbmZpZywgcmV0dXJuZWQuY29uZmlnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSBpZiAocmV0dXJuZWQgPT09ICdza2lwJylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRmaWxlQ29tcGxldGUoKTtcdC8vIHBhcnNlIHRoZSBuZXh0IGZpbGUgaW4gdGhlIHF1ZXVlLCBpZiBhbnlcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXcmFwIHVwIHRoZSB1c2VyJ3MgY29tcGxldGUgY2FsbGJhY2ssIGlmIGFueSwgc28gdGhhdCBvdXJzIGFsc28gZ2V0cyBleGVjdXRlZFxuXHRcdFx0XHR2YXIgdXNlckNvbXBsZXRlRnVuYyA9IGYuaW5zdGFuY2VDb25maWcuY29tcGxldGU7XG5cdFx0XHRcdGYuaW5zdGFuY2VDb25maWcuY29tcGxldGUgPSBmdW5jdGlvbihyZXN1bHRzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKGlzRnVuY3Rpb24odXNlckNvbXBsZXRlRnVuYykpXG5cdFx0XHRcdFx0XHR1c2VyQ29tcGxldGVGdW5jKHJlc3VsdHMsIGYuZmlsZSwgZi5pbnB1dEVsZW0pO1xuXHRcdFx0XHRcdGZpbGVDb21wbGV0ZSgpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdFBhcGEucGFyc2UoZi5maWxlLCBmLmluc3RhbmNlQ29uZmlnKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gZXJyb3IobmFtZSwgZmlsZSwgZWxlbSwgcmVhc29uKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaXNGdW5jdGlvbihvcHRpb25zLmVycm9yKSlcblx0XHRcdFx0XHRvcHRpb25zLmVycm9yKHtuYW1lOiBuYW1lfSwgZmlsZSwgZWxlbSwgcmVhc29uKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gZmlsZUNvbXBsZXRlKClcblx0XHRcdHtcblx0XHRcdFx0cXVldWUuc3BsaWNlKDAsIDEpO1xuXHRcdFx0XHRwYXJzZU5leHRGaWxlKCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cblx0aWYgKElTX1BBUEFfV09SS0VSKVxuXHR7XG5cdFx0Z2xvYmFsLm9ubWVzc2FnZSA9IHdvcmtlclRocmVhZFJlY2VpdmVkTWVzc2FnZTtcblx0fVxuXG5cblxuXG5cdGZ1bmN0aW9uIENzdlRvSnNvbihfaW5wdXQsIF9jb25maWcpXG5cdHtcblx0XHRfY29uZmlnID0gX2NvbmZpZyB8fCB7fTtcblx0XHR2YXIgZHluYW1pY1R5cGluZyA9IF9jb25maWcuZHluYW1pY1R5cGluZyB8fCBmYWxzZTtcblx0XHRpZiAoaXNGdW5jdGlvbihkeW5hbWljVHlwaW5nKSkge1xuXHRcdFx0X2NvbmZpZy5keW5hbWljVHlwaW5nRnVuY3Rpb24gPSBkeW5hbWljVHlwaW5nO1xuXHRcdFx0Ly8gV2lsbCBiZSBmaWxsZWQgb24gZmlyc3Qgcm93IGNhbGxcblx0XHRcdGR5bmFtaWNUeXBpbmcgPSB7fTtcblx0XHR9XG5cdFx0X2NvbmZpZy5keW5hbWljVHlwaW5nID0gZHluYW1pY1R5cGluZztcblxuXHRcdF9jb25maWcudHJhbnNmb3JtID0gaXNGdW5jdGlvbihfY29uZmlnLnRyYW5zZm9ybSkgPyBfY29uZmlnLnRyYW5zZm9ybSA6IGZhbHNlO1xuXG5cdFx0aWYgKF9jb25maWcud29ya2VyICYmIFBhcGEuV09SS0VSU19TVVBQT1JURUQpXG5cdFx0e1xuXHRcdFx0dmFyIHcgPSBuZXdXb3JrZXIoKTtcblxuXHRcdFx0dy51c2VyU3RlcCA9IF9jb25maWcuc3RlcDtcblx0XHRcdHcudXNlckNodW5rID0gX2NvbmZpZy5jaHVuaztcblx0XHRcdHcudXNlckNvbXBsZXRlID0gX2NvbmZpZy5jb21wbGV0ZTtcblx0XHRcdHcudXNlckVycm9yID0gX2NvbmZpZy5lcnJvcjtcblxuXHRcdFx0X2NvbmZpZy5zdGVwID0gaXNGdW5jdGlvbihfY29uZmlnLnN0ZXApO1xuXHRcdFx0X2NvbmZpZy5jaHVuayA9IGlzRnVuY3Rpb24oX2NvbmZpZy5jaHVuayk7XG5cdFx0XHRfY29uZmlnLmNvbXBsZXRlID0gaXNGdW5jdGlvbihfY29uZmlnLmNvbXBsZXRlKTtcblx0XHRcdF9jb25maWcuZXJyb3IgPSBpc0Z1bmN0aW9uKF9jb25maWcuZXJyb3IpO1xuXHRcdFx0ZGVsZXRlIF9jb25maWcud29ya2VyO1x0Ly8gcHJldmVudCBpbmZpbml0ZSBsb29wXG5cblx0XHRcdHcucG9zdE1lc3NhZ2Uoe1xuXHRcdFx0XHRpbnB1dDogX2lucHV0LFxuXHRcdFx0XHRjb25maWc6IF9jb25maWcsXG5cdFx0XHRcdHdvcmtlcklkOiB3LmlkXG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBzdHJlYW1lciA9IG51bGw7XG5cdFx0aWYgKF9pbnB1dCA9PT0gUGFwYS5OT0RFX1NUUkVBTV9JTlBVVCAmJiB0eXBlb2YgUEFQQV9CUk9XU0VSX0NPTlRFWFQgPT09ICd1bmRlZmluZWQnKVxuXHRcdHtcblx0XHRcdC8vIGNyZWF0ZSBhIG5vZGUgRHVwbGV4IHN0cmVhbSBmb3IgdXNlXG5cdFx0XHQvLyB3aXRoIC5waXBlXG5cdFx0XHRzdHJlYW1lciA9IG5ldyBEdXBsZXhTdHJlYW1TdHJlYW1lcihfY29uZmlnKTtcblx0XHRcdHJldHVybiBzdHJlYW1lci5nZXRTdHJlYW0oKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAodHlwZW9mIF9pbnB1dCA9PT0gJ3N0cmluZycpXG5cdFx0e1xuXHRcdFx0X2lucHV0ID0gc3RyaXBCb20oX2lucHV0KTtcblx0XHRcdGlmIChfY29uZmlnLmRvd25sb2FkKVxuXHRcdFx0XHRzdHJlYW1lciA9IG5ldyBOZXR3b3JrU3RyZWFtZXIoX2NvbmZpZyk7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdHN0cmVhbWVyID0gbmV3IFN0cmluZ1N0cmVhbWVyKF9jb25maWcpO1xuXHRcdH1cblx0XHRlbHNlIGlmIChfaW5wdXQucmVhZGFibGUgPT09IHRydWUgJiYgaXNGdW5jdGlvbihfaW5wdXQucmVhZCkgJiYgaXNGdW5jdGlvbihfaW5wdXQub24pKVxuXHRcdHtcblx0XHRcdHN0cmVhbWVyID0gbmV3IFJlYWRhYmxlU3RyZWFtU3RyZWFtZXIoX2NvbmZpZyk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKChnbG9iYWwuRmlsZSAmJiBfaW5wdXQgaW5zdGFuY2VvZiBGaWxlKSB8fCBfaW5wdXQgaW5zdGFuY2VvZiBPYmplY3QpXHQvLyAuLi5TYWZhcmkuIChzZWUgaXNzdWUgIzEwNilcblx0XHRcdHN0cmVhbWVyID0gbmV3IEZpbGVTdHJlYW1lcihfY29uZmlnKTtcblxuXHRcdHJldHVybiBzdHJlYW1lci5zdHJlYW0oX2lucHV0KTtcblxuXHRcdC8vIFN0cmlwIGNoYXJhY3RlciBmcm9tIFVURi04IEJPTSBlbmNvZGVkIGZpbGVzIHRoYXQgY2F1c2UgaXNzdWUgcGFyc2luZyB0aGUgZmlsZVxuXHRcdGZ1bmN0aW9uIHN0cmlwQm9tKHN0cmluZykge1xuXHRcdFx0aWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSAweGZlZmYpIHtcblx0XHRcdFx0cmV0dXJuIHN0cmluZy5zbGljZSgxKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzdHJpbmc7XG5cdFx0fVxuXHR9XG5cblxuXG5cblxuXG5cdGZ1bmN0aW9uIEpzb25Ub0NzdihfaW5wdXQsIF9jb25maWcpXG5cdHtcblx0XHQvLyBEZWZhdWx0IGNvbmZpZ3VyYXRpb25cblxuXHRcdC8qKiB3aGV0aGVyIHRvIHN1cnJvdW5kIGV2ZXJ5IGRhdHVtIHdpdGggcXVvdGVzICovXG5cdFx0dmFyIF9xdW90ZXMgPSBmYWxzZTtcblxuXHRcdC8qKiB3aGV0aGVyIHRvIHdyaXRlIGhlYWRlcnMgKi9cblx0XHR2YXIgX3dyaXRlSGVhZGVyID0gdHJ1ZTtcblxuXHRcdC8qKiBkZWxpbWl0aW5nIGNoYXJhY3RlcihzKSAqL1xuXHRcdHZhciBfZGVsaW1pdGVyID0gJywnO1xuXG5cdFx0LyoqIG5ld2xpbmUgY2hhcmFjdGVyKHMpICovXG5cdFx0dmFyIF9uZXdsaW5lID0gJ1xcclxcbic7XG5cblx0XHQvKiogcXVvdGUgY2hhcmFjdGVyICovXG5cdFx0dmFyIF9xdW90ZUNoYXIgPSAnXCInO1xuXG5cdFx0LyoqIGVzY2FwZWQgcXVvdGUgY2hhcmFjdGVyLCBlaXRoZXIgXCJcIiBvciA8Y29uZmlnLmVzY2FwZUNoYXI+XCIgKi9cblx0XHR2YXIgX2VzY2FwZWRRdW90ZSA9IF9xdW90ZUNoYXIgKyBfcXVvdGVDaGFyO1xuXG5cdFx0LyoqIHdoZXRoZXIgdG8gc2tpcCBlbXB0eSBsaW5lcyAqL1xuXHRcdHZhciBfc2tpcEVtcHR5TGluZXMgPSBmYWxzZTtcblxuXHRcdC8qKiB0aGUgY29sdW1ucyAoa2V5cykgd2UgZXhwZWN0IHdoZW4gd2UgdW5wYXJzZSBvYmplY3RzICovXG5cdFx0dmFyIF9jb2x1bW5zID0gbnVsbDtcblxuXHRcdC8qKiB3aGV0aGVyIHRvIHByZXZlbnQgb3V0cHV0dGluZyBjZWxscyB0aGF0IGNhbiBiZSBwYXJzZWQgYXMgZm9ybXVsYWUgYnkgc3ByZWFkc2hlZXQgc29mdHdhcmUgKEV4Y2VsIGFuZCBMaWJyZU9mZmljZSkgKi9cblx0XHR2YXIgX2VzY2FwZUZvcm11bGFlID0gZmFsc2U7XG5cblx0XHR1bnBhY2tDb25maWcoKTtcblxuXHRcdHZhciBxdW90ZUNoYXJSZWdleCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKF9xdW90ZUNoYXIpLCAnZycpO1xuXG5cdFx0aWYgKHR5cGVvZiBfaW5wdXQgPT09ICdzdHJpbmcnKVxuXHRcdFx0X2lucHV0ID0gSlNPTi5wYXJzZShfaW5wdXQpO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoX2lucHV0KSlcblx0XHR7XG5cdFx0XHRpZiAoIV9pbnB1dC5sZW5ndGggfHwgQXJyYXkuaXNBcnJheShfaW5wdXRbMF0pKVxuXHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKG51bGwsIF9pbnB1dCwgX3NraXBFbXB0eUxpbmVzKTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBfaW5wdXRbMF0gPT09ICdvYmplY3QnKVxuXHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKF9jb2x1bW5zIHx8IE9iamVjdC5rZXlzKF9pbnB1dFswXSksIF9pbnB1dCwgX3NraXBFbXB0eUxpbmVzKTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAodHlwZW9mIF9pbnB1dCA9PT0gJ29iamVjdCcpXG5cdFx0e1xuXHRcdFx0aWYgKHR5cGVvZiBfaW5wdXQuZGF0YSA9PT0gJ3N0cmluZycpXG5cdFx0XHRcdF9pbnB1dC5kYXRhID0gSlNPTi5wYXJzZShfaW5wdXQuZGF0YSk7XG5cblx0XHRcdGlmIChBcnJheS5pc0FycmF5KF9pbnB1dC5kYXRhKSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKCFfaW5wdXQuZmllbGRzKVxuXHRcdFx0XHRcdF9pbnB1dC5maWVsZHMgPSBfaW5wdXQubWV0YSAmJiBfaW5wdXQubWV0YS5maWVsZHMgfHwgX2NvbHVtbnM7XG5cblx0XHRcdFx0aWYgKCFfaW5wdXQuZmllbGRzKVxuXHRcdFx0XHRcdF9pbnB1dC5maWVsZHMgPSAgQXJyYXkuaXNBcnJheShfaW5wdXQuZGF0YVswXSlcblx0XHRcdFx0XHRcdD8gX2lucHV0LmZpZWxkc1xuXHRcdFx0XHRcdFx0OiB0eXBlb2YgX2lucHV0LmRhdGFbMF0gPT09ICdvYmplY3QnXG5cdFx0XHRcdFx0XHRcdD8gT2JqZWN0LmtleXMoX2lucHV0LmRhdGFbMF0pXG5cdFx0XHRcdFx0XHRcdDogW107XG5cblx0XHRcdFx0aWYgKCEoQXJyYXkuaXNBcnJheShfaW5wdXQuZGF0YVswXSkpICYmIHR5cGVvZiBfaW5wdXQuZGF0YVswXSAhPT0gJ29iamVjdCcpXG5cdFx0XHRcdFx0X2lucHV0LmRhdGEgPSBbX2lucHV0LmRhdGFdO1x0Ly8gaGFuZGxlcyBpbnB1dCBsaWtlIFsxLDIsM10gb3IgWydhc2RmJ11cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShfaW5wdXQuZmllbGRzIHx8IFtdLCBfaW5wdXQuZGF0YSB8fCBbXSwgX3NraXBFbXB0eUxpbmVzKTtcblx0XHR9XG5cblx0XHQvLyBEZWZhdWx0IChhbnkgdmFsaWQgcGF0aHMgc2hvdWxkIHJldHVybiBiZWZvcmUgdGhpcylcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBzZXJpYWxpemUgdW5yZWNvZ25pemVkIGlucHV0Jyk7XG5cblxuXHRcdGZ1bmN0aW9uIHVucGFja0NvbmZpZygpXG5cdFx0e1xuXHRcdFx0aWYgKHR5cGVvZiBfY29uZmlnICE9PSAnb2JqZWN0Jylcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRpZiAodHlwZW9mIF9jb25maWcuZGVsaW1pdGVyID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgICYmICFQYXBhLkJBRF9ERUxJTUlURVJTLmZpbHRlcihmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gX2NvbmZpZy5kZWxpbWl0ZXIuaW5kZXhPZih2YWx1ZSkgIT09IC0xOyB9KS5sZW5ndGgpXG5cdFx0XHR7XG5cdFx0XHRcdF9kZWxpbWl0ZXIgPSBfY29uZmlnLmRlbGltaXRlcjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBfY29uZmlnLnF1b3RlcyA9PT0gJ2Jvb2xlYW4nXG5cdFx0XHRcdHx8IHR5cGVvZiBfY29uZmlnLnF1b3RlcyA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdFx0XHR8fCBBcnJheS5pc0FycmF5KF9jb25maWcucXVvdGVzKSlcblx0XHRcdFx0X3F1b3RlcyA9IF9jb25maWcucXVvdGVzO1xuXG5cdFx0XHRpZiAodHlwZW9mIF9jb25maWcuc2tpcEVtcHR5TGluZXMgPT09ICdib29sZWFuJ1xuXHRcdFx0XHR8fCB0eXBlb2YgX2NvbmZpZy5za2lwRW1wdHlMaW5lcyA9PT0gJ3N0cmluZycpXG5cdFx0XHRcdF9za2lwRW1wdHlMaW5lcyA9IF9jb25maWcuc2tpcEVtcHR5TGluZXM7XG5cblx0XHRcdGlmICh0eXBlb2YgX2NvbmZpZy5uZXdsaW5lID09PSAnc3RyaW5nJylcblx0XHRcdFx0X25ld2xpbmUgPSBfY29uZmlnLm5ld2xpbmU7XG5cblx0XHRcdGlmICh0eXBlb2YgX2NvbmZpZy5xdW90ZUNoYXIgPT09ICdzdHJpbmcnKVxuXHRcdFx0XHRfcXVvdGVDaGFyID0gX2NvbmZpZy5xdW90ZUNoYXI7XG5cblx0XHRcdGlmICh0eXBlb2YgX2NvbmZpZy5oZWFkZXIgPT09ICdib29sZWFuJylcblx0XHRcdFx0X3dyaXRlSGVhZGVyID0gX2NvbmZpZy5oZWFkZXI7XG5cblx0XHRcdGlmIChBcnJheS5pc0FycmF5KF9jb25maWcuY29sdW1ucykpIHtcblxuXHRcdFx0XHRpZiAoX2NvbmZpZy5jb2x1bW5zLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdPcHRpb24gY29sdW1ucyBpcyBlbXB0eScpO1xuXG5cdFx0XHRcdF9jb2x1bW5zID0gX2NvbmZpZy5jb2x1bW5zO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2NvbmZpZy5lc2NhcGVDaGFyICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0X2VzY2FwZWRRdW90ZSA9IF9jb25maWcuZXNjYXBlQ2hhciArIF9xdW90ZUNoYXI7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChfY29uZmlnLmVzY2FwZUZvcm11bGFlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdFx0XHRcdF9lc2NhcGVGb3JtdWxhZSA9IF9jb25maWcuZXNjYXBlRm9ybXVsYWU7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBfY29uZmlnLmVzY2FwZUZvcm11bGFlID09PSAnYm9vbGVhbicgJiYgX2NvbmZpZy5lc2NhcGVGb3JtdWxhZSkge1xuXHRcdFx0XHRfZXNjYXBlRm9ybXVsYWUgPSAgL15bPStcXC1AXFx0XFxyXS4qJC87XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LyoqIFRoZSBkb3VibGUgZm9yIGxvb3AgdGhhdCBpdGVyYXRlcyB0aGUgZGF0YSBhbmQgd3JpdGVzIG91dCBhIENTViBzdHJpbmcgaW5jbHVkaW5nIGhlYWRlciByb3cgKi9cblx0XHRmdW5jdGlvbiBzZXJpYWxpemUoZmllbGRzLCBkYXRhLCBza2lwRW1wdHlMaW5lcylcblx0XHR7XG5cdFx0XHR2YXIgY3N2ID0gJyc7XG5cblx0XHRcdGlmICh0eXBlb2YgZmllbGRzID09PSAnc3RyaW5nJylcblx0XHRcdFx0ZmllbGRzID0gSlNPTi5wYXJzZShmaWVsZHMpO1xuXHRcdFx0aWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJylcblx0XHRcdFx0ZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cblx0XHRcdHZhciBoYXNIZWFkZXIgPSBBcnJheS5pc0FycmF5KGZpZWxkcykgJiYgZmllbGRzLmxlbmd0aCA+IDA7XG5cdFx0XHR2YXIgZGF0YUtleWVkQnlGaWVsZCA9ICEoQXJyYXkuaXNBcnJheShkYXRhWzBdKSk7XG5cblx0XHRcdC8vIElmIHRoZXJlIGEgaGVhZGVyIHJvdywgd3JpdGUgaXQgZmlyc3Rcblx0XHRcdGlmIChoYXNIZWFkZXIgJiYgX3dyaXRlSGVhZGVyKVxuXHRcdFx0e1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChpID4gMClcblx0XHRcdFx0XHRcdGNzdiArPSBfZGVsaW1pdGVyO1xuXHRcdFx0XHRcdGNzdiArPSBzYWZlKGZpZWxkc1tpXSwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGRhdGEubGVuZ3RoID4gMClcblx0XHRcdFx0XHRjc3YgKz0gX25ld2xpbmU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZW4gd3JpdGUgb3V0IHRoZSBkYXRhXG5cdFx0XHRmb3IgKHZhciByb3cgPSAwOyByb3cgPCBkYXRhLmxlbmd0aDsgcm93KyspXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBtYXhDb2wgPSBoYXNIZWFkZXIgPyBmaWVsZHMubGVuZ3RoIDogZGF0YVtyb3ddLmxlbmd0aDtcblxuXHRcdFx0XHR2YXIgZW1wdHlMaW5lID0gZmFsc2U7XG5cdFx0XHRcdHZhciBudWxsTGluZSA9IGhhc0hlYWRlciA/IE9iamVjdC5rZXlzKGRhdGFbcm93XSkubGVuZ3RoID09PSAwIDogZGF0YVtyb3ddLmxlbmd0aCA9PT0gMDtcblx0XHRcdFx0aWYgKHNraXBFbXB0eUxpbmVzICYmICFoYXNIZWFkZXIpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRlbXB0eUxpbmUgPSBza2lwRW1wdHlMaW5lcyA9PT0gJ2dyZWVkeScgPyBkYXRhW3Jvd10uam9pbignJykudHJpbSgpID09PSAnJyA6IGRhdGFbcm93XS5sZW5ndGggPT09IDEgJiYgZGF0YVtyb3ddWzBdLmxlbmd0aCA9PT0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc2tpcEVtcHR5TGluZXMgPT09ICdncmVlZHknICYmIGhhc0hlYWRlcikge1xuXHRcdFx0XHRcdHZhciBsaW5lID0gW107XG5cdFx0XHRcdFx0Zm9yICh2YXIgYyA9IDA7IGMgPCBtYXhDb2w7IGMrKykge1xuXHRcdFx0XHRcdFx0dmFyIGN4ID0gZGF0YUtleWVkQnlGaWVsZCA/IGZpZWxkc1tjXSA6IGM7XG5cdFx0XHRcdFx0XHRsaW5lLnB1c2goZGF0YVtyb3ddW2N4XSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVtcHR5TGluZSA9IGxpbmUuam9pbignJykudHJpbSgpID09PSAnJztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWVtcHR5TGluZSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG1heENvbDsgY29sKyspXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGNvbCA+IDAgJiYgIW51bGxMaW5lKVxuXHRcdFx0XHRcdFx0XHRjc3YgKz0gX2RlbGltaXRlcjtcblx0XHRcdFx0XHRcdHZhciBjb2xJZHggPSBoYXNIZWFkZXIgJiYgZGF0YUtleWVkQnlGaWVsZCA/IGZpZWxkc1tjb2xdIDogY29sO1xuXHRcdFx0XHRcdFx0Y3N2ICs9IHNhZmUoZGF0YVtyb3ddW2NvbElkeF0sIGNvbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChyb3cgPCBkYXRhLmxlbmd0aCAtIDEgJiYgKCFza2lwRW1wdHlMaW5lcyB8fCAobWF4Q29sID4gMCAmJiAhbnVsbExpbmUpKSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRjc3YgKz0gX25ld2xpbmU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY3N2O1xuXHRcdH1cblxuXHRcdC8qKiBFbmNsb3NlcyBhIHZhbHVlIGFyb3VuZCBxdW90ZXMgaWYgbmVlZGVkIChtYWtlcyBhIHZhbHVlIHNhZmUgZm9yIENTViBpbnNlcnRpb24pICovXG5cdFx0ZnVuY3Rpb24gc2FmZShzdHIsIGNvbClcblx0XHR7XG5cdFx0XHRpZiAodHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3RyID09PSBudWxsKVxuXHRcdFx0XHRyZXR1cm4gJyc7XG5cblx0XHRcdGlmIChzdHIuY29uc3RydWN0b3IgPT09IERhdGUpXG5cdFx0XHRcdHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpLnNsaWNlKDEsIDI1KTtcblxuXHRcdFx0dmFyIG5lZWRzUXVvdGVzID0gZmFsc2U7XG5cblx0XHRcdGlmIChfZXNjYXBlRm9ybXVsYWUgJiYgdHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiAmJiBfZXNjYXBlRm9ybXVsYWUudGVzdChzdHIpKSB7XG5cdFx0XHRcdHN0ciA9IFwiJ1wiICsgc3RyO1xuXHRcdFx0XHRuZWVkc1F1b3RlcyA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBlc2NhcGVkUXVvdGVTdHIgPSBzdHIudG9TdHJpbmcoKS5yZXBsYWNlKHF1b3RlQ2hhclJlZ2V4LCBfZXNjYXBlZFF1b3RlKTtcblxuXHRcdFx0bmVlZHNRdW90ZXMgPSBuZWVkc1F1b3Rlc1xuXHRcdFx0XHRcdFx0XHR8fCBfcXVvdGVzID09PSB0cnVlXG5cdFx0XHRcdFx0XHRcdHx8ICh0eXBlb2YgX3F1b3RlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBfcXVvdGVzKHN0ciwgY29sKSlcblx0XHRcdFx0XHRcdFx0fHwgKEFycmF5LmlzQXJyYXkoX3F1b3RlcykgJiYgX3F1b3Rlc1tjb2xdKVxuXHRcdFx0XHRcdFx0XHR8fCBoYXNBbnkoZXNjYXBlZFF1b3RlU3RyLCBQYXBhLkJBRF9ERUxJTUlURVJTKVxuXHRcdFx0XHRcdFx0XHR8fCBlc2NhcGVkUXVvdGVTdHIuaW5kZXhPZihfZGVsaW1pdGVyKSA+IC0xXG5cdFx0XHRcdFx0XHRcdHx8IGVzY2FwZWRRdW90ZVN0ci5jaGFyQXQoMCkgPT09ICcgJ1xuXHRcdFx0XHRcdFx0XHR8fCBlc2NhcGVkUXVvdGVTdHIuY2hhckF0KGVzY2FwZWRRdW90ZVN0ci5sZW5ndGggLSAxKSA9PT0gJyAnO1xuXG5cdFx0XHRyZXR1cm4gbmVlZHNRdW90ZXMgPyBfcXVvdGVDaGFyICsgZXNjYXBlZFF1b3RlU3RyICsgX3F1b3RlQ2hhciA6IGVzY2FwZWRRdW90ZVN0cjtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYXNBbnkoc3RyLCBzdWJzdHJpbmdzKVxuXHRcdHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic3RyaW5ncy5sZW5ndGg7IGkrKylcblx0XHRcdFx0aWYgKHN0ci5pbmRleE9mKHN1YnN0cmluZ3NbaV0pID4gLTEpXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblxuXHQvKiogQ2h1bmtTdHJlYW1lciBpcyB0aGUgYmFzZSBwcm90b3R5cGUgZm9yIHZhcmlvdXMgc3RyZWFtZXIgaW1wbGVtZW50YXRpb25zLiAqL1xuXHRmdW5jdGlvbiBDaHVua1N0cmVhbWVyKGNvbmZpZylcblx0e1xuXHRcdHRoaXMuX2hhbmRsZSA9IG51bGw7XG5cdFx0dGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcblx0XHR0aGlzLl9jb21wbGV0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLl9oYWx0ZWQgPSBmYWxzZTtcblx0XHR0aGlzLl9pbnB1dCA9IG51bGw7XG5cdFx0dGhpcy5fYmFzZUluZGV4ID0gMDtcblx0XHR0aGlzLl9wYXJ0aWFsTGluZSA9ICcnO1xuXHRcdHRoaXMuX3Jvd0NvdW50ID0gMDtcblx0XHR0aGlzLl9zdGFydCA9IDA7XG5cdFx0dGhpcy5fbmV4dENodW5rID0gbnVsbDtcblx0XHR0aGlzLmlzRmlyc3RDaHVuayA9IHRydWU7XG5cdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzID0ge1xuXHRcdFx0ZGF0YTogW10sXG5cdFx0XHRlcnJvcnM6IFtdLFxuXHRcdFx0bWV0YToge31cblx0XHR9O1xuXHRcdHJlcGxhY2VDb25maWcuY2FsbCh0aGlzLCBjb25maWcpO1xuXG5cdFx0dGhpcy5wYXJzZUNodW5rID0gZnVuY3Rpb24oY2h1bmssIGlzRmFrZUNodW5rKVxuXHRcdHtcblx0XHRcdC8vIEZpcnN0IGNodW5rIHByZS1wcm9jZXNzaW5nXG5cdFx0XHRjb25zdCBza2lwRmlyc3ROTGluZXMgPSBwYXJzZUludCh0aGlzLl9jb25maWcuc2tpcEZpcnN0TkxpbmVzKSB8fCAwO1xuXHRcdFx0aWYgKHRoaXMuaXNGaXJzdENodW5rICYmIHNraXBGaXJzdE5MaW5lcyA+IDApIHtcblx0XHRcdFx0bGV0IF9uZXdsaW5lID0gdGhpcy5fY29uZmlnLm5ld2xpbmU7XG5cdFx0XHRcdGlmICghX25ld2xpbmUpIHtcblx0XHRcdFx0XHRjb25zdCBxdW90ZUNoYXIgPSB0aGlzLl9jb25maWcucXVvdGVDaGFyIHx8ICdcIic7XG5cdFx0XHRcdFx0X25ld2xpbmUgPSB0aGlzLl9oYW5kbGUuZ3Vlc3NMaW5lRW5kaW5ncyhjaHVuaywgcXVvdGVDaGFyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBzcGxpdENodW5rID0gY2h1bmsuc3BsaXQoX25ld2xpbmUpO1xuXHRcdFx0XHRjaHVuayA9IFsuLi5zcGxpdENodW5rLnNsaWNlKHNraXBGaXJzdE5MaW5lcyldLmpvaW4oX25ld2xpbmUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuaXNGaXJzdENodW5rICYmIGlzRnVuY3Rpb24odGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmspKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgbW9kaWZpZWRDaHVuayA9IHRoaXMuX2NvbmZpZy5iZWZvcmVGaXJzdENodW5rKGNodW5rKTtcblx0XHRcdFx0aWYgKG1vZGlmaWVkQ2h1bmsgIT09IHVuZGVmaW5lZClcblx0XHRcdFx0XHRjaHVuayA9IG1vZGlmaWVkQ2h1bms7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmlzRmlyc3RDaHVuayA9IGZhbHNlO1xuXHRcdFx0dGhpcy5faGFsdGVkID0gZmFsc2U7XG5cblx0XHRcdC8vIFJlam9pbiB0aGUgbGluZSB3ZSBsaWtlbHkganVzdCBzcGxpdCBpbiB0d28gYnkgY2h1bmtpbmcgdGhlIGZpbGVcblx0XHRcdHZhciBhZ2dyZWdhdGUgPSB0aGlzLl9wYXJ0aWFsTGluZSArIGNodW5rO1xuXHRcdFx0dGhpcy5fcGFydGlhbExpbmUgPSAnJztcblx0XHRcdHZhciByZXN1bHRzID0gdGhpcy5faGFuZGxlLnBhcnNlKGFnZ3JlZ2F0ZSwgdGhpcy5fYmFzZUluZGV4LCAhdGhpcy5fZmluaXNoZWQpO1xuXG5cdFx0XHRpZiAodGhpcy5faGFuZGxlLnBhdXNlZCgpIHx8IHRoaXMuX2hhbmRsZS5hYm9ydGVkKCkpIHtcblx0XHRcdFx0dGhpcy5faGFsdGVkID0gdHJ1ZTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbGFzdEluZGV4ID0gcmVzdWx0cy5tZXRhLmN1cnNvcjtcblxuXHRcdFx0aWYgKCF0aGlzLl9maW5pc2hlZClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5fcGFydGlhbExpbmUgPSBhZ2dyZWdhdGUuc3Vic3RyaW5nKGxhc3RJbmRleCAtIHRoaXMuX2Jhc2VJbmRleCk7XG5cdFx0XHRcdHRoaXMuX2Jhc2VJbmRleCA9IGxhc3RJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5kYXRhKVxuXHRcdFx0XHR0aGlzLl9yb3dDb3VudCArPSByZXN1bHRzLmRhdGEubGVuZ3RoO1xuXG5cdFx0XHR2YXIgZmluaXNoZWRJbmNsdWRpbmdQcmV2aWV3ID0gdGhpcy5fZmluaXNoZWQgfHwgKHRoaXMuX2NvbmZpZy5wcmV2aWV3ICYmIHRoaXMuX3Jvd0NvdW50ID49IHRoaXMuX2NvbmZpZy5wcmV2aWV3KTtcblxuXHRcdFx0aWYgKElTX1BBUEFfV09SS0VSKVxuXHRcdFx0e1xuXHRcdFx0XHRnbG9iYWwucG9zdE1lc3NhZ2Uoe1xuXHRcdFx0XHRcdHJlc3VsdHM6IHJlc3VsdHMsXG5cdFx0XHRcdFx0d29ya2VySWQ6IFBhcGEuV09SS0VSX0lELFxuXHRcdFx0XHRcdGZpbmlzaGVkOiBmaW5pc2hlZEluY2x1ZGluZ1ByZXZpZXdcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2NvbmZpZy5jaHVuaykgJiYgIWlzRmFrZUNodW5rKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9jb25maWcuY2h1bmsocmVzdWx0cywgdGhpcy5faGFuZGxlKTtcblx0XHRcdFx0aWYgKHRoaXMuX2hhbmRsZS5wYXVzZWQoKSB8fCB0aGlzLl9oYW5kbGUuYWJvcnRlZCgpKSB7XG5cdFx0XHRcdFx0dGhpcy5faGFsdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0cmVzdWx0cyA9IHVuZGVmaW5lZDtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMuX2NvbmZpZy5zdGVwICYmICF0aGlzLl9jb25maWcuY2h1bmspIHtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGEgPSB0aGlzLl9jb21wbGV0ZVJlc3VsdHMuZGF0YS5jb25jYXQocmVzdWx0cy5kYXRhKTtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycyA9IHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5lcnJvcnMuY29uY2F0KHJlc3VsdHMuZXJyb3JzKTtcblx0XHRcdFx0dGhpcy5fY29tcGxldGVSZXN1bHRzLm1ldGEgPSByZXN1bHRzLm1ldGE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5fY29tcGxldGVkICYmIGZpbmlzaGVkSW5jbHVkaW5nUHJldmlldyAmJiBpc0Z1bmN0aW9uKHRoaXMuX2NvbmZpZy5jb21wbGV0ZSkgJiYgKCFyZXN1bHRzIHx8ICFyZXN1bHRzLm1ldGEuYWJvcnRlZCkpIHtcblx0XHRcdFx0dGhpcy5fY29uZmlnLmNvbXBsZXRlKHRoaXMuX2NvbXBsZXRlUmVzdWx0cywgdGhpcy5faW5wdXQpO1xuXHRcdFx0XHR0aGlzLl9jb21wbGV0ZWQgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWZpbmlzaGVkSW5jbHVkaW5nUHJldmlldyAmJiAoIXJlc3VsdHMgfHwgIXJlc3VsdHMubWV0YS5wYXVzZWQpKVxuXHRcdFx0XHR0aGlzLl9uZXh0Q2h1bmsoKTtcblxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHRcdHRoaXMuX3NlbmRFcnJvciA9IGZ1bmN0aW9uKGVycm9yKVxuXHRcdHtcblx0XHRcdGlmIChpc0Z1bmN0aW9uKHRoaXMuX2NvbmZpZy5lcnJvcikpXG5cdFx0XHRcdHRoaXMuX2NvbmZpZy5lcnJvcihlcnJvcik7XG5cdFx0XHRlbHNlIGlmIChJU19QQVBBX1dPUktFUiAmJiB0aGlzLl9jb25maWcuZXJyb3IpXG5cdFx0XHR7XG5cdFx0XHRcdGdsb2JhbC5wb3N0TWVzc2FnZSh7XG5cdFx0XHRcdFx0d29ya2VySWQ6IFBhcGEuV09SS0VSX0lELFxuXHRcdFx0XHRcdGVycm9yOiBlcnJvcixcblx0XHRcdFx0XHRmaW5pc2hlZDogZmFsc2Vcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHJlcGxhY2VDb25maWcoY29uZmlnKVxuXHRcdHtcblx0XHRcdC8vIERlZXAtY29weSB0aGUgY29uZmlnIHNvIHdlIGNhbiBlZGl0IGl0XG5cdFx0XHR2YXIgY29uZmlnQ29weSA9IGNvcHkoY29uZmlnKTtcblx0XHRcdGNvbmZpZ0NvcHkuY2h1bmtTaXplID0gcGFyc2VJbnQoY29uZmlnQ29weS5jaHVua1NpemUpO1x0Ly8gcGFyc2VJbnQgVkVSWSBpbXBvcnRhbnQgc28gd2UgZG9uJ3QgY29uY2F0ZW5hdGUgc3RyaW5ncyFcblx0XHRcdGlmICghY29uZmlnLnN0ZXAgJiYgIWNvbmZpZy5jaHVuaylcblx0XHRcdFx0Y29uZmlnQ29weS5jaHVua1NpemUgPSBudWxsOyAgLy8gZGlzYWJsZSBSYW5nZSBoZWFkZXIgaWYgbm90IHN0cmVhbWluZzsgYmFkIHZhbHVlcyBicmVhayBJSVMgLSBzZWUgaXNzdWUgIzE5NlxuXHRcdFx0dGhpcy5faGFuZGxlID0gbmV3IFBhcnNlckhhbmRsZShjb25maWdDb3B5KTtcblx0XHRcdHRoaXMuX2hhbmRsZS5zdHJlYW1lciA9IHRoaXM7XG5cdFx0XHR0aGlzLl9jb25maWcgPSBjb25maWdDb3B5O1x0Ly8gcGVyc2lzdCB0aGUgY29weSB0byB0aGUgY2FsbGVyXG5cdFx0fVxuXHR9XG5cblxuXHRmdW5jdGlvbiBOZXR3b3JrU3RyZWFtZXIoY29uZmlnKVxuXHR7XG5cdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdGlmICghY29uZmlnLmNodW5rU2l6ZSlcblx0XHRcdGNvbmZpZy5jaHVua1NpemUgPSBQYXBhLlJlbW90ZUNodW5rU2l6ZTtcblx0XHRDaHVua1N0cmVhbWVyLmNhbGwodGhpcywgY29uZmlnKTtcblxuXHRcdHZhciB4aHI7XG5cblx0XHRpZiAoSVNfV09SS0VSKVxuXHRcdHtcblx0XHRcdHRoaXMuX25leHRDaHVuayA9IGZ1bmN0aW9uKClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5fcmVhZENodW5rKCk7XG5cdFx0XHRcdHRoaXMuX2NodW5rTG9hZGVkKCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXHRcdFx0dGhpcy5fbmV4dENodW5rID0gZnVuY3Rpb24oKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9yZWFkQ2h1bmsoKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dGhpcy5zdHJlYW0gPSBmdW5jdGlvbih1cmwpXG5cdFx0e1xuXHRcdFx0dGhpcy5faW5wdXQgPSB1cmw7XG5cdFx0XHR0aGlzLl9uZXh0Q2h1bmsoKTtcdC8vIFN0YXJ0cyBzdHJlYW1pbmdcblx0XHR9O1xuXG5cdFx0dGhpcy5fcmVhZENodW5rID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdGlmICh0aGlzLl9maW5pc2hlZClcblx0XHRcdHtcblx0XHRcdFx0dGhpcy5fY2h1bmtMb2FkZWQoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuXHRcdFx0aWYgKHRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpXG5cdFx0XHR7XG5cdFx0XHRcdHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLl9jb25maWcud2l0aENyZWRlbnRpYWxzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIUlTX1dPUktFUilcblx0XHRcdHtcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGJpbmRGdW5jdGlvbih0aGlzLl9jaHVua0xvYWRlZCwgdGhpcyk7XG5cdFx0XHRcdHhoci5vbmVycm9yID0gYmluZEZ1bmN0aW9uKHRoaXMuX2NodW5rRXJyb3IsIHRoaXMpO1xuXHRcdFx0fVxuXG5cdFx0XHR4aHIub3Blbih0aGlzLl9jb25maWcuZG93bmxvYWRSZXF1ZXN0Qm9keSA/ICdQT1NUJyA6ICdHRVQnLCB0aGlzLl9pbnB1dCwgIUlTX1dPUktFUik7XG5cdFx0XHQvLyBIZWFkZXJzIGNhbiBvbmx5IGJlIHNldCB3aGVuIG9uY2UgdGhlIHJlcXVlc3Qgc3RhdGUgaXMgT1BFTkVEXG5cdFx0XHRpZiAodGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnMpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBoZWFkZXJzID0gdGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnM7XG5cblx0XHRcdFx0Zm9yICh2YXIgaGVhZGVyTmFtZSBpbiBoZWFkZXJzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyTmFtZSwgaGVhZGVyc1toZWFkZXJOYW1lXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBlbmQgPSB0aGlzLl9zdGFydCArIHRoaXMuX2NvbmZpZy5jaHVua1NpemUgLSAxO1x0Ly8gbWludXMgb25lIGJlY2F1c2UgYnl0ZSByYW5nZSBpcyBpbmNsdXNpdmVcblx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoJ1JhbmdlJywgJ2J5dGVzPScgKyB0aGlzLl9zdGFydCArICctJyArIGVuZCk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHhoci5zZW5kKHRoaXMuX2NvbmZpZy5kb3dubG9hZFJlcXVlc3RCb2R5KTtcblx0XHRcdH1cblx0XHRcdGNhdGNoIChlcnIpIHtcblx0XHRcdFx0dGhpcy5fY2h1bmtFcnJvcihlcnIubWVzc2FnZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChJU19XT1JLRVIgJiYgeGhyLnN0YXR1cyA9PT0gMClcblx0XHRcdFx0dGhpcy5fY2h1bmtFcnJvcigpO1xuXHRcdH07XG5cblx0XHR0aGlzLl9jaHVua0xvYWRlZCA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0aWYgKHhoci5zdGF0dXMgPCAyMDAgfHwgeGhyLnN0YXR1cyA+PSA0MDApXG5cdFx0XHR7XG5cdFx0XHRcdHRoaXMuX2NodW5rRXJyb3IoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgY2h1bmNrU2l6ZSBhcyBpdCBtYXkgYmUgYSBkaWZlcmVuY2Ugb24gcmVwb25zZSBsZW50Z2ggZHVlIHRvIGNoYXJhY3RlcnMgd2l0aCBtb3JlIHRoYW4gMSBieXRlXG5cdFx0XHR0aGlzLl9zdGFydCArPSB0aGlzLl9jb25maWcuY2h1bmtTaXplID8gdGhpcy5fY29uZmlnLmNodW5rU2l6ZSA6IHhoci5yZXNwb25zZVRleHQubGVuZ3RoO1xuXHRcdFx0dGhpcy5fZmluaXNoZWQgPSAhdGhpcy5fY29uZmlnLmNodW5rU2l6ZSB8fCB0aGlzLl9zdGFydCA+PSBnZXRGaWxlU2l6ZSh4aHIpO1xuXHRcdFx0dGhpcy5wYXJzZUNodW5rKHhoci5yZXNwb25zZVRleHQpO1xuXHRcdH07XG5cblx0XHR0aGlzLl9jaHVua0Vycm9yID0gZnVuY3Rpb24oZXJyb3JNZXNzYWdlKVxuXHRcdHtcblx0XHRcdHZhciBlcnJvclRleHQgPSB4aHIuc3RhdHVzVGV4dCB8fCBlcnJvck1lc3NhZ2U7XG5cdFx0XHR0aGlzLl9zZW5kRXJyb3IobmV3IEVycm9yKGVycm9yVGV4dCkpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBnZXRGaWxlU2l6ZSh4aHIpXG5cdFx0e1xuXHRcdFx0dmFyIGNvbnRlbnRSYW5nZSA9IHhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1SYW5nZScpO1xuXHRcdFx0aWYgKGNvbnRlbnRSYW5nZSA9PT0gbnVsbCkgeyAvLyBubyBjb250ZW50IHJhbmdlLCB0aGVuIGZpbmlzaCFcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBhcnNlSW50KGNvbnRlbnRSYW5nZS5zdWJzdHJpbmcoY29udGVudFJhbmdlLmxhc3RJbmRleE9mKCcvJykgKyAxKSk7XG5cdFx0fVxuXHR9XG5cdE5ldHdvcmtTdHJlYW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENodW5rU3RyZWFtZXIucHJvdG90eXBlKTtcblx0TmV0d29ya1N0cmVhbWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5ldHdvcmtTdHJlYW1lcjtcblxuXG5cdGZ1bmN0aW9uIEZpbGVTdHJlYW1lcihjb25maWcpXG5cdHtcblx0XHRjb25maWcgPSBjb25maWcgfHwge307XG5cdFx0aWYgKCFjb25maWcuY2h1bmtTaXplKVxuXHRcdFx0Y29uZmlnLmNodW5rU2l6ZSA9IFBhcGEuTG9jYWxDaHVua1NpemU7XG5cdFx0Q2h1bmtTdHJlYW1lci5jYWxsKHRoaXMsIGNvbmZpZyk7XG5cblx0XHR2YXIgcmVhZGVyLCBzbGljZTtcblxuXHRcdC8vIEZpbGVSZWFkZXIgaXMgYmV0dGVyIHRoYW4gRmlsZVJlYWRlclN5bmMgKGV2ZW4gaW4gd29ya2VyKSAtIHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8yNDcwODY0OS8xMDQ4ODYyXG5cdFx0Ly8gQnV0IEZpcmVmb3ggaXMgYSBwaWxsLCB0b28gLSBzZWUgaXNzdWUgIzc2OiBodHRwczovL2dpdGh1Yi5jb20vbWhvbHQvUGFwYVBhcnNlL2lzc3Vlcy83NlxuXHRcdHZhciB1c2luZ0FzeW5jUmVhZGVyID0gdHlwZW9mIEZpbGVSZWFkZXIgIT09ICd1bmRlZmluZWQnO1x0Ly8gU2FmYXJpIGRvZXNuJ3QgY29uc2lkZXIgaXQgYSBmdW5jdGlvbiAtIHNlZSBpc3N1ZSAjMTA1XG5cblx0XHR0aGlzLnN0cmVhbSA9IGZ1bmN0aW9uKGZpbGUpXG5cdFx0e1xuXHRcdFx0dGhpcy5faW5wdXQgPSBmaWxlO1xuXHRcdFx0c2xpY2UgPSBmaWxlLnNsaWNlIHx8IGZpbGUud2Via2l0U2xpY2UgfHwgZmlsZS5tb3pTbGljZTtcblxuXHRcdFx0aWYgKHVzaW5nQXN5bmNSZWFkZXIpXG5cdFx0XHR7XG5cdFx0XHRcdHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHRcdC8vIFByZWZlcnJlZCBtZXRob2Qgb2YgcmVhZGluZyBmaWxlcywgZXZlbiBpbiB3b3JrZXJzXG5cdFx0XHRcdHJlYWRlci5vbmxvYWQgPSBiaW5kRnVuY3Rpb24odGhpcy5fY2h1bmtMb2FkZWQsIHRoaXMpO1xuXHRcdFx0XHRyZWFkZXIub25lcnJvciA9IGJpbmRGdW5jdGlvbih0aGlzLl9jaHVua0Vycm9yLCB0aGlzKTtcblx0XHRcdH1cblx0XHRcdGVsc2Vcblx0XHRcdFx0cmVhZGVyID0gbmV3IEZpbGVSZWFkZXJTeW5jKCk7XHQvLyBIYWNrIGZvciBydW5uaW5nIGluIGEgd2ViIHdvcmtlciBpbiBGaXJlZm94XG5cblx0XHRcdHRoaXMuX25leHRDaHVuaygpO1x0Ly8gU3RhcnRzIHN0cmVhbWluZ1xuXHRcdH07XG5cblx0XHR0aGlzLl9uZXh0Q2h1bmsgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0aWYgKCF0aGlzLl9maW5pc2hlZCAmJiAoIXRoaXMuX2NvbmZpZy5wcmV2aWV3IHx8IHRoaXMuX3Jvd0NvdW50IDwgdGhpcy5fY29uZmlnLnByZXZpZXcpKVxuXHRcdFx0XHR0aGlzLl9yZWFkQ2h1bmsoKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5fcmVhZENodW5rID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHZhciBpbnB1dCA9IHRoaXMuX2lucHV0O1xuXHRcdFx0aWYgKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBlbmQgPSBNYXRoLm1pbih0aGlzLl9zdGFydCArIHRoaXMuX2NvbmZpZy5jaHVua1NpemUsIHRoaXMuX2lucHV0LnNpemUpO1xuXHRcdFx0XHRpbnB1dCA9IHNsaWNlLmNhbGwoaW5wdXQsIHRoaXMuX3N0YXJ0LCBlbmQpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHR4dCA9IHJlYWRlci5yZWFkQXNUZXh0KGlucHV0LCB0aGlzLl9jb25maWcuZW5jb2RpbmcpO1xuXHRcdFx0aWYgKCF1c2luZ0FzeW5jUmVhZGVyKVxuXHRcdFx0XHR0aGlzLl9jaHVua0xvYWRlZCh7IHRhcmdldDogeyByZXN1bHQ6IHR4dCB9IH0pO1x0Ly8gbWltaWMgdGhlIGFzeW5jIHNpZ25hdHVyZVxuXHRcdH07XG5cblx0XHR0aGlzLl9jaHVua0xvYWRlZCA9IGZ1bmN0aW9uKGV2ZW50KVxuXHRcdHtcblx0XHRcdC8vIFZlcnkgaW1wb3J0YW50IHRvIGluY3JlbWVudCBzdGFydCBlYWNoIHRpbWUgYmVmb3JlIGhhbmRsaW5nIHJlc3VsdHNcblx0XHRcdHRoaXMuX3N0YXJ0ICs9IHRoaXMuX2NvbmZpZy5jaHVua1NpemU7XG5cdFx0XHR0aGlzLl9maW5pc2hlZCA9ICF0aGlzLl9jb25maWcuY2h1bmtTaXplIHx8IHRoaXMuX3N0YXJ0ID49IHRoaXMuX2lucHV0LnNpemU7XG5cdFx0XHR0aGlzLnBhcnNlQ2h1bmsoZXZlbnQudGFyZ2V0LnJlc3VsdCk7XG5cdFx0fTtcblxuXHRcdHRoaXMuX2NodW5rRXJyb3IgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0dGhpcy5fc2VuZEVycm9yKHJlYWRlci5lcnJvcik7XG5cdFx0fTtcblxuXHR9XG5cdEZpbGVTdHJlYW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENodW5rU3RyZWFtZXIucHJvdG90eXBlKTtcblx0RmlsZVN0cmVhbWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZpbGVTdHJlYW1lcjtcblxuXG5cdGZ1bmN0aW9uIFN0cmluZ1N0cmVhbWVyKGNvbmZpZylcblx0e1xuXHRcdGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblx0XHRDaHVua1N0cmVhbWVyLmNhbGwodGhpcywgY29uZmlnKTtcblxuXHRcdHZhciByZW1haW5pbmc7XG5cdFx0dGhpcy5zdHJlYW0gPSBmdW5jdGlvbihzKVxuXHRcdHtcblx0XHRcdHJlbWFpbmluZyA9IHM7XG5cdFx0XHRyZXR1cm4gdGhpcy5fbmV4dENodW5rKCk7XG5cdFx0fTtcblx0XHR0aGlzLl9uZXh0Q2h1bmsgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuX2ZpbmlzaGVkKSByZXR1cm47XG5cdFx0XHR2YXIgc2l6ZSA9IHRoaXMuX2NvbmZpZy5jaHVua1NpemU7XG5cdFx0XHR2YXIgY2h1bms7XG5cdFx0XHRpZihzaXplKSB7XG5cdFx0XHRcdGNodW5rID0gcmVtYWluaW5nLnN1YnN0cmluZygwLCBzaXplKTtcblx0XHRcdFx0cmVtYWluaW5nID0gcmVtYWluaW5nLnN1YnN0cmluZyhzaXplKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNodW5rID0gcmVtYWluaW5nO1xuXHRcdFx0XHRyZW1haW5pbmcgPSAnJztcblx0XHRcdH1cblx0XHRcdHRoaXMuX2ZpbmlzaGVkID0gIXJlbWFpbmluZztcblx0XHRcdHJldHVybiB0aGlzLnBhcnNlQ2h1bmsoY2h1bmspO1xuXHRcdH07XG5cdH1cblx0U3RyaW5nU3RyZWFtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdHJpbmdTdHJlYW1lci5wcm90b3R5cGUpO1xuXHRTdHJpbmdTdHJlYW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdHJpbmdTdHJlYW1lcjtcblxuXG5cdGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtU3RyZWFtZXIoY29uZmlnKVxuXHR7XG5cdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXG5cdFx0Q2h1bmtTdHJlYW1lci5jYWxsKHRoaXMsIGNvbmZpZyk7XG5cblx0XHR2YXIgcXVldWUgPSBbXTtcblx0XHR2YXIgcGFyc2VPbkRhdGEgPSB0cnVlO1xuXHRcdHZhciBzdHJlYW1IYXNFbmRlZCA9IGZhbHNlO1xuXG5cdFx0dGhpcy5wYXVzZSA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRDaHVua1N0cmVhbWVyLnByb3RvdHlwZS5wYXVzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0dGhpcy5faW5wdXQucGF1c2UoKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5yZXN1bWUgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0Q2h1bmtTdHJlYW1lci5wcm90b3R5cGUucmVzdW1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR0aGlzLl9pbnB1dC5yZXN1bWUoKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pXG5cdFx0e1xuXHRcdFx0dGhpcy5faW5wdXQgPSBzdHJlYW07XG5cblx0XHRcdHRoaXMuX2lucHV0Lm9uKCdkYXRhJywgdGhpcy5fc3RyZWFtRGF0YSk7XG5cdFx0XHR0aGlzLl9pbnB1dC5vbignZW5kJywgdGhpcy5fc3RyZWFtRW5kKTtcblx0XHRcdHRoaXMuX2lucHV0Lm9uKCdlcnJvcicsIHRoaXMuX3N0cmVhbUVycm9yKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5fY2hlY2tJc0ZpbmlzaGVkID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdGlmIChzdHJlYW1IYXNFbmRlZCAmJiBxdWV1ZS5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0dGhpcy5fZmluaXNoZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR0aGlzLl9uZXh0Q2h1bmsgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0dGhpcy5fY2hlY2tJc0ZpbmlzaGVkKCk7XG5cdFx0XHRpZiAocXVldWUubGVuZ3RoKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLnBhcnNlQ2h1bmsocXVldWUuc2hpZnQoKSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdHBhcnNlT25EYXRhID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5fc3RyZWFtRGF0YSA9IGJpbmRGdW5jdGlvbihmdW5jdGlvbihjaHVuaylcblx0XHR7XG5cdFx0XHR0cnlcblx0XHRcdHtcblx0XHRcdFx0cXVldWUucHVzaCh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnID8gY2h1bmsgOiBjaHVuay50b1N0cmluZyh0aGlzLl9jb25maWcuZW5jb2RpbmcpKTtcblxuXHRcdFx0XHRpZiAocGFyc2VPbkRhdGEpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwYXJzZU9uRGF0YSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRoaXMuX2NoZWNrSXNGaW5pc2hlZCgpO1xuXHRcdFx0XHRcdHRoaXMucGFyc2VDaHVuayhxdWV1ZS5zaGlmdCgpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Y2F0Y2ggKGVycm9yKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLl9zdHJlYW1FcnJvcihlcnJvcik7XG5cdFx0XHR9XG5cdFx0fSwgdGhpcyk7XG5cblx0XHR0aGlzLl9zdHJlYW1FcnJvciA9IGJpbmRGdW5jdGlvbihmdW5jdGlvbihlcnJvcilcblx0XHR7XG5cdFx0XHR0aGlzLl9zdHJlYW1DbGVhblVwKCk7XG5cdFx0XHR0aGlzLl9zZW5kRXJyb3IoZXJyb3IpO1xuXHRcdH0sIHRoaXMpO1xuXG5cdFx0dGhpcy5fc3RyZWFtRW5kID0gYmluZEZ1bmN0aW9uKGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHR0aGlzLl9zdHJlYW1DbGVhblVwKCk7XG5cdFx0XHRzdHJlYW1IYXNFbmRlZCA9IHRydWU7XG5cdFx0XHR0aGlzLl9zdHJlYW1EYXRhKCcnKTtcblx0XHR9LCB0aGlzKTtcblxuXHRcdHRoaXMuX3N0cmVhbUNsZWFuVXAgPSBiaW5kRnVuY3Rpb24oZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgdGhpcy5fc3RyZWFtRGF0YSk7XG5cdFx0XHR0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcignZW5kJywgdGhpcy5fc3RyZWFtRW5kKTtcblx0XHRcdHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHRoaXMuX3N0cmVhbUVycm9yKTtcblx0XHR9LCB0aGlzKTtcblx0fVxuXHRSZWFkYWJsZVN0cmVhbVN0cmVhbWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2h1bmtTdHJlYW1lci5wcm90b3R5cGUpO1xuXHRSZWFkYWJsZVN0cmVhbVN0cmVhbWVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlYWRhYmxlU3RyZWFtU3RyZWFtZXI7XG5cblxuXHRmdW5jdGlvbiBEdXBsZXhTdHJlYW1TdHJlYW1lcihfY29uZmlnKSB7XG5cdFx0dmFyIER1cGxleCA9IHJlcXVpcmUoJ3N0cmVhbScpLkR1cGxleDtcblx0XHR2YXIgY29uZmlnID0gY29weShfY29uZmlnKTtcblx0XHR2YXIgcGFyc2VPbldyaXRlID0gdHJ1ZTtcblx0XHR2YXIgd3JpdGVTdHJlYW1IYXNGaW5pc2hlZCA9IGZhbHNlO1xuXHRcdHZhciBwYXJzZUNhbGxiYWNrUXVldWUgPSBbXTtcblx0XHR2YXIgc3RyZWFtID0gbnVsbDtcblxuXHRcdHRoaXMuX29uQ3N2RGF0YSA9IGZ1bmN0aW9uKHJlc3VsdHMpXG5cdFx0e1xuXHRcdFx0dmFyIGRhdGEgPSByZXN1bHRzLmRhdGE7XG5cdFx0XHRpZiAoIXN0cmVhbS5wdXNoKGRhdGEpICYmICF0aGlzLl9oYW5kbGUucGF1c2VkKCkpIHtcblx0XHRcdFx0Ly8gdGhlIHdyaXRlYWJsZSBjb25zdW1lciBidWZmZXIgaGFzIGZpbGxlZCB1cFxuXHRcdFx0XHQvLyBzbyB3ZSBuZWVkIHRvIHBhdXNlIHVudGlsIG1vcmUgaXRlbXNcblx0XHRcdFx0Ly8gY2FuIGJlIHByb2Nlc3NlZFxuXHRcdFx0XHR0aGlzLl9oYW5kbGUucGF1c2UoKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0dGhpcy5fb25Dc3ZDb21wbGV0ZSA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHQvLyBub2RlIHdpbGwgZmluaXNoIHRoZSByZWFkIHN0cmVhbSB3aGVuXG5cdFx0XHQvLyBudWxsIGlzIHB1c2hlZFxuXHRcdFx0c3RyZWFtLnB1c2gobnVsbCk7XG5cdFx0fTtcblxuXHRcdGNvbmZpZy5zdGVwID0gYmluZEZ1bmN0aW9uKHRoaXMuX29uQ3N2RGF0YSwgdGhpcyk7XG5cdFx0Y29uZmlnLmNvbXBsZXRlID0gYmluZEZ1bmN0aW9uKHRoaXMuX29uQ3N2Q29tcGxldGUsIHRoaXMpO1xuXHRcdENodW5rU3RyZWFtZXIuY2FsbCh0aGlzLCBjb25maWcpO1xuXG5cdFx0dGhpcy5fbmV4dENodW5rID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdGlmICh3cml0ZVN0cmVhbUhhc0ZpbmlzaGVkICYmIHBhcnNlQ2FsbGJhY2tRdWV1ZS5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0dGhpcy5fZmluaXNoZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHBhcnNlQ2FsbGJhY2tRdWV1ZS5sZW5ndGgpIHtcblx0XHRcdFx0cGFyc2VDYWxsYmFja1F1ZXVlLnNoaWZ0KCkoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBhcnNlT25Xcml0ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMuX2FkZFRvUGFyc2VRdWV1ZSA9IGZ1bmN0aW9uKGNodW5rLCBjYWxsYmFjaylcblx0XHR7XG5cdFx0XHQvLyBhZGQgdG8gcXVldWUgc28gdGhhdCB3ZSBjYW4gaW5kaWNhdGVcblx0XHRcdC8vIGNvbXBsZXRpb24gdmlhIGNhbGxiYWNrXG5cdFx0XHQvLyBub2RlIHdpbGwgYXV0b21hdGljYWxseSBwYXVzZSB0aGUgaW5jb21pbmcgc3RyZWFtXG5cdFx0XHQvLyB3aGVuIHRvbyBtYW55IGl0ZW1zIGhhdmUgYmVlbiBhZGRlZCB3aXRob3V0IHRoZWlyXG5cdFx0XHQvLyBjYWxsYmFjayBiZWluZyBpbnZva2VkXG5cdFx0XHRwYXJzZUNhbGxiYWNrUXVldWUucHVzaChiaW5kRnVuY3Rpb24oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMucGFyc2VDaHVuayh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnID8gY2h1bmsgOiBjaHVuay50b1N0cmluZyhjb25maWcuZW5jb2RpbmcpKTtcblx0XHRcdFx0aWYgKGlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpKTtcblx0XHRcdGlmIChwYXJzZU9uV3JpdGUpIHtcblx0XHRcdFx0cGFyc2VPbldyaXRlID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuX25leHRDaHVuaygpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR0aGlzLl9vblJlYWQgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0aWYgKHRoaXMuX2hhbmRsZS5wYXVzZWQoKSkge1xuXHRcdFx0XHQvLyB0aGUgd3JpdGVhYmxlIGNvbnN1bWVyIGNhbiBoYW5kbGUgbW9yZSBkYXRhXG5cdFx0XHRcdC8vIHNvIHJlc3VtZSB0aGUgY2h1bmsgcGFyc2luZ1xuXHRcdFx0XHR0aGlzLl9oYW5kbGUucmVzdW1lKCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHRoaXMuX29uV3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKVxuXHRcdHtcblx0XHRcdHRoaXMuX2FkZFRvUGFyc2VRdWV1ZShjaHVuaywgY2FsbGJhY2spO1xuXHRcdH07XG5cblx0XHR0aGlzLl9vbldyaXRlQ29tcGxldGUgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0d3JpdGVTdHJlYW1IYXNGaW5pc2hlZCA9IHRydWU7XG5cdFx0XHQvLyBoYXZlIHRvIHdyaXRlIGVtcHR5IHN0cmluZ1xuXHRcdFx0Ly8gc28gcGFyc2VyIGtub3dzIGl0cyBkb25lXG5cdFx0XHR0aGlzLl9hZGRUb1BhcnNlUXVldWUoJycpO1xuXHRcdH07XG5cblx0XHR0aGlzLmdldFN0cmVhbSA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gc3RyZWFtO1xuXHRcdH07XG5cdFx0c3RyZWFtID0gbmV3IER1cGxleCh7XG5cdFx0XHRyZWFkYWJsZU9iamVjdE1vZGU6IHRydWUsXG5cdFx0XHRkZWNvZGVTdHJpbmdzOiBmYWxzZSxcblx0XHRcdHJlYWQ6IGJpbmRGdW5jdGlvbih0aGlzLl9vblJlYWQsIHRoaXMpLFxuXHRcdFx0d3JpdGU6IGJpbmRGdW5jdGlvbih0aGlzLl9vbldyaXRlLCB0aGlzKVxuXHRcdH0pO1xuXHRcdHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBiaW5kRnVuY3Rpb24odGhpcy5fb25Xcml0ZUNvbXBsZXRlLCB0aGlzKSk7XG5cdH1cblx0aWYgKHR5cGVvZiBQQVBBX0JST1dTRVJfQ09OVEVYVCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHREdXBsZXhTdHJlYW1TdHJlYW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENodW5rU3RyZWFtZXIucHJvdG90eXBlKTtcblx0XHREdXBsZXhTdHJlYW1TdHJlYW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEdXBsZXhTdHJlYW1TdHJlYW1lcjtcblx0fVxuXG5cblx0Ly8gVXNlIG9uZSBQYXJzZXJIYW5kbGUgcGVyIGVudGlyZSBDU1YgZmlsZSBvciBzdHJpbmdcblx0ZnVuY3Rpb24gUGFyc2VySGFuZGxlKF9jb25maWcpXG5cdHtcblx0XHQvLyBPbmUgZ29hbCBpcyB0byBtaW5pbWl6ZSB0aGUgdXNlIG9mIHJlZ3VsYXIgZXhwcmVzc2lvbnMuLi5cblx0XHR2YXIgTUFYX0ZMT0FUID0gTWF0aC5wb3coMiwgNTMpO1xuXHRcdHZhciBNSU5fRkxPQVQgPSAtTUFYX0ZMT0FUO1xuXHRcdHZhciBGTE9BVCA9IC9eXFxzKi0/KFxcZCtcXC4/fFxcLlxcZCt8XFxkK1xcLlxcZCspKFtlRV1bLStdP1xcZCspP1xccyokLztcblx0XHR2YXIgSVNPX0RBVEUgPSAvXigoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSkpJC87XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHZhciBfc3RlcENvdW50ZXIgPSAwO1x0Ly8gTnVtYmVyIG9mIHRpbWVzIHN0ZXAgd2FzIGNhbGxlZCAobnVtYmVyIG9mIHJvd3MgcGFyc2VkKVxuXHRcdHZhciBfcm93Q291bnRlciA9IDA7XHQvLyBOdW1iZXIgb2Ygcm93cyB0aGF0IGhhdmUgYmVlbiBwYXJzZWQgc28gZmFyXG5cdFx0dmFyIF9pbnB1dDtcdFx0XHRcdC8vIFRoZSBpbnB1dCBiZWluZyBwYXJzZWRcblx0XHR2YXIgX3BhcnNlcjtcdFx0XHQvLyBUaGUgY29yZSBwYXJzZXIgYmVpbmcgdXNlZFxuXHRcdHZhciBfcGF1c2VkID0gZmFsc2U7XHQvLyBXaGV0aGVyIHdlIGFyZSBwYXVzZWQgb3Igbm90XG5cdFx0dmFyIF9hYm9ydGVkID0gZmFsc2U7XHQvLyBXaGV0aGVyIHRoZSBwYXJzZXIgaGFzIGFib3J0ZWQgb3Igbm90XG5cdFx0dmFyIF9kZWxpbWl0ZXJFcnJvcjtcdC8vIFRlbXBvcmFyeSBzdGF0ZSBiZXR3ZWVuIGRlbGltaXRlciBkZXRlY3Rpb24gYW5kIHByb2Nlc3NpbmcgcmVzdWx0c1xuXHRcdHZhciBfZmllbGRzID0gW107XHRcdC8vIEZpZWxkcyBhcmUgZnJvbSB0aGUgaGVhZGVyIHJvdyBvZiB0aGUgaW5wdXQsIGlmIHRoZXJlIGlzIG9uZVxuXHRcdHZhciBfcmVzdWx0cyA9IHtcdFx0Ly8gVGhlIGxhc3QgcmVzdWx0cyByZXR1cm5lZCBmcm9tIHRoZSBwYXJzZXJcblx0XHRcdGRhdGE6IFtdLFxuXHRcdFx0ZXJyb3JzOiBbXSxcblx0XHRcdG1ldGE6IHt9XG5cdFx0fTtcblxuXHRcdGlmIChpc0Z1bmN0aW9uKF9jb25maWcuc3RlcCkpXG5cdFx0e1xuXHRcdFx0dmFyIHVzZXJTdGVwID0gX2NvbmZpZy5zdGVwO1xuXHRcdFx0X2NvbmZpZy5zdGVwID0gZnVuY3Rpb24ocmVzdWx0cylcblx0XHRcdHtcblx0XHRcdFx0X3Jlc3VsdHMgPSByZXN1bHRzO1xuXG5cdFx0XHRcdGlmIChuZWVkc0hlYWRlclJvdygpKVxuXHRcdFx0XHRcdHByb2Nlc3NSZXN1bHRzKCk7XG5cdFx0XHRcdGVsc2VcdC8vIG9ubHkgY2FsbCB1c2VyJ3Mgc3RlcCBmdW5jdGlvbiBhZnRlciBoZWFkZXIgcm93XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwcm9jZXNzUmVzdWx0cygpO1xuXG5cdFx0XHRcdFx0Ly8gSXQncyBwb3NzYmlsZSB0aGF0IHRoaXMgbGluZSB3YXMgZW1wdHkgYW5kIHRoZXJlJ3Mgbm8gcm93IGhlcmUgYWZ0ZXIgYWxsXG5cdFx0XHRcdFx0aWYgKF9yZXN1bHRzLmRhdGEubGVuZ3RoID09PSAwKVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0X3N0ZXBDb3VudGVyICs9IHJlc3VsdHMuZGF0YS5sZW5ndGg7XG5cdFx0XHRcdFx0aWYgKF9jb25maWcucHJldmlldyAmJiBfc3RlcENvdW50ZXIgPiBfY29uZmlnLnByZXZpZXcpXG5cdFx0XHRcdFx0XHRfcGFyc2VyLmFib3J0KCk7XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRfcmVzdWx0cy5kYXRhID0gX3Jlc3VsdHMuZGF0YVswXTtcblx0XHRcdFx0XHRcdHVzZXJTdGVwKF9yZXN1bHRzLCBzZWxmKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogUGFyc2VzIGlucHV0LiBNb3N0IHVzZXJzIHdvbid0IG5lZWQsIGFuZCBzaG91bGRuJ3QgbWVzcyB3aXRoLCB0aGUgYmFzZUluZGV4XG5cdFx0ICogYW5kIGlnbm9yZUxhc3RSb3cgcGFyYW1ldGVycy4gVGhleSBhcmUgdXNlZCBieSBzdHJlYW1lcnMgKHdyYXBwZXIgZnVuY3Rpb25zKVxuXHRcdCAqIHdoZW4gYW4gaW5wdXQgY29tZXMgaW4gbXVsdGlwbGUgY2h1bmtzLCBsaWtlIGZyb20gYSBmaWxlLlxuXHRcdCAqL1xuXHRcdHRoaXMucGFyc2UgPSBmdW5jdGlvbihpbnB1dCwgYmFzZUluZGV4LCBpZ25vcmVMYXN0Um93KVxuXHRcdHtcblx0XHRcdHZhciBxdW90ZUNoYXIgPSBfY29uZmlnLnF1b3RlQ2hhciB8fCAnXCInO1xuXHRcdFx0aWYgKCFfY29uZmlnLm5ld2xpbmUpXG5cdFx0XHRcdF9jb25maWcubmV3bGluZSA9IHRoaXMuZ3Vlc3NMaW5lRW5kaW5ncyhpbnB1dCwgcXVvdGVDaGFyKTtcblxuXHRcdFx0X2RlbGltaXRlckVycm9yID0gZmFsc2U7XG5cdFx0XHRpZiAoIV9jb25maWcuZGVsaW1pdGVyKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgZGVsaW1HdWVzcyA9IGd1ZXNzRGVsaW1pdGVyKGlucHV0LCBfY29uZmlnLm5ld2xpbmUsIF9jb25maWcuc2tpcEVtcHR5TGluZXMsIF9jb25maWcuY29tbWVudHMsIF9jb25maWcuZGVsaW1pdGVyc1RvR3Vlc3MpO1xuXHRcdFx0XHRpZiAoZGVsaW1HdWVzcy5zdWNjZXNzZnVsKVxuXHRcdFx0XHRcdF9jb25maWcuZGVsaW1pdGVyID0gZGVsaW1HdWVzcy5iZXN0RGVsaW1pdGVyO1xuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRfZGVsaW1pdGVyRXJyb3IgPSB0cnVlO1x0Ly8gYWRkIGVycm9yIGFmdGVyIHBhcnNpbmcgKG90aGVyd2lzZSBpdCB3b3VsZCBiZSBvdmVyd3JpdHRlbilcblx0XHRcdFx0XHRfY29uZmlnLmRlbGltaXRlciA9IFBhcGEuRGVmYXVsdERlbGltaXRlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRfcmVzdWx0cy5tZXRhLmRlbGltaXRlciA9IF9jb25maWcuZGVsaW1pdGVyO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZihpc0Z1bmN0aW9uKF9jb25maWcuZGVsaW1pdGVyKSlcblx0XHRcdHtcblx0XHRcdFx0X2NvbmZpZy5kZWxpbWl0ZXIgPSBfY29uZmlnLmRlbGltaXRlcihpbnB1dCk7XG5cdFx0XHRcdF9yZXN1bHRzLm1ldGEuZGVsaW1pdGVyID0gX2NvbmZpZy5kZWxpbWl0ZXI7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwYXJzZXJDb25maWcgPSBjb3B5KF9jb25maWcpO1xuXHRcdFx0aWYgKF9jb25maWcucHJldmlldyAmJiBfY29uZmlnLmhlYWRlcilcblx0XHRcdFx0cGFyc2VyQ29uZmlnLnByZXZpZXcrKztcdC8vIHRvIGNvbXBlbnNhdGUgZm9yIGhlYWRlciByb3dcblxuXHRcdFx0X2lucHV0ID0gaW5wdXQ7XG5cdFx0XHRfcGFyc2VyID0gbmV3IFBhcnNlcihwYXJzZXJDb25maWcpO1xuXHRcdFx0X3Jlc3VsdHMgPSBfcGFyc2VyLnBhcnNlKF9pbnB1dCwgYmFzZUluZGV4LCBpZ25vcmVMYXN0Um93KTtcblx0XHRcdHByb2Nlc3NSZXN1bHRzKCk7XG5cdFx0XHRyZXR1cm4gX3BhdXNlZCA/IHsgbWV0YTogeyBwYXVzZWQ6IHRydWUgfSB9IDogKF9yZXN1bHRzIHx8IHsgbWV0YTogeyBwYXVzZWQ6IGZhbHNlIH0gfSk7XG5cdFx0fTtcblxuXHRcdHRoaXMucGF1c2VkID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdHJldHVybiBfcGF1c2VkO1xuXHRcdH07XG5cblx0XHR0aGlzLnBhdXNlID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdF9wYXVzZWQgPSB0cnVlO1xuXHRcdFx0X3BhcnNlci5hYm9ydCgpO1xuXG5cdFx0XHQvLyBJZiBpdCBpcyBzdHJlYW1pbmcgdmlhIFwiY2h1bmtpbmdcIiwgdGhlIHJlYWRlciB3aWxsIHN0YXJ0IGFwcGVuZGluZyBjb3JyZWN0bHkgYWxyZWFkeSBzbyBubyBuZWVkIHRvIHN1YnN0cmluZyxcblx0XHRcdC8vIG90aGVyd2lzZSB3ZSBjYW4gZ2V0IGR1cGxpY2F0ZSBjb250ZW50IHdpdGhpbiBhIHJvd1xuXHRcdFx0X2lucHV0ID0gaXNGdW5jdGlvbihfY29uZmlnLmNodW5rKSA/IFwiXCIgOiBfaW5wdXQuc3Vic3RyaW5nKF9wYXJzZXIuZ2V0Q2hhckluZGV4KCkpO1xuXHRcdH07XG5cblx0XHR0aGlzLnJlc3VtZSA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRpZihzZWxmLnN0cmVhbWVyLl9oYWx0ZWQpIHtcblx0XHRcdFx0X3BhdXNlZCA9IGZhbHNlO1xuXHRcdFx0XHRzZWxmLnN0cmVhbWVyLnBhcnNlQ2h1bmsoX2lucHV0LCB0cnVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIEJ1Z2ZpeDogIzYzNiBJbiBjYXNlIHRoZSBwcm9jZXNzaW5nIGhhc24ndCBoYWx0ZWQgeWV0XG5cdFx0XHRcdC8vIHdhaXQgZm9yIGl0IHRvIGhhbHQgaW4gb3JkZXIgdG8gcmVzdW1lXG5cdFx0XHRcdHNldFRpbWVvdXQoc2VsZi5yZXN1bWUsIDMpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR0aGlzLmFib3J0ZWQgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIF9hYm9ydGVkO1xuXHRcdH07XG5cblx0XHR0aGlzLmFib3J0ID0gZnVuY3Rpb24oKVxuXHRcdHtcblx0XHRcdF9hYm9ydGVkID0gdHJ1ZTtcblx0XHRcdF9wYXJzZXIuYWJvcnQoKTtcblx0XHRcdF9yZXN1bHRzLm1ldGEuYWJvcnRlZCA9IHRydWU7XG5cdFx0XHRpZiAoaXNGdW5jdGlvbihfY29uZmlnLmNvbXBsZXRlKSlcblx0XHRcdFx0X2NvbmZpZy5jb21wbGV0ZShfcmVzdWx0cyk7XG5cdFx0XHRfaW5wdXQgPSAnJztcblx0XHR9O1xuXG5cdFx0dGhpcy5ndWVzc0xpbmVFbmRpbmdzID0gZnVuY3Rpb24oaW5wdXQsIHF1b3RlQ2hhcilcblx0XHR7XG5cdFx0XHRpbnB1dCA9IGlucHV0LnN1YnN0cmluZygwLCAxMDI0ICogMTAyNCk7XHQvLyBtYXggbGVuZ3RoIDEgTUJcblx0XHRcdC8vIFJlcGxhY2UgYWxsIHRoZSB0ZXh0IGluc2lkZSBxdW90ZXNcblx0XHRcdHZhciByZSA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHF1b3RlQ2hhcikgKyAnKFteXSo/KScgKyBlc2NhcGVSZWdFeHAocXVvdGVDaGFyKSwgJ2dtJyk7XG5cdFx0XHRpbnB1dCA9IGlucHV0LnJlcGxhY2UocmUsICcnKTtcblxuXHRcdFx0dmFyIHIgPSBpbnB1dC5zcGxpdCgnXFxyJyk7XG5cblx0XHRcdHZhciBuID0gaW5wdXQuc3BsaXQoJ1xcbicpO1xuXG5cdFx0XHR2YXIgbkFwcGVhcnNGaXJzdCA9IChuLmxlbmd0aCA+IDEgJiYgblswXS5sZW5ndGggPCByWzBdLmxlbmd0aCk7XG5cblx0XHRcdGlmIChyLmxlbmd0aCA9PT0gMSB8fCBuQXBwZWFyc0ZpcnN0KVxuXHRcdFx0XHRyZXR1cm4gJ1xcbic7XG5cblx0XHRcdHZhciBudW1XaXRoTiA9IDA7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHIubGVuZ3RoOyBpKyspXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChyW2ldWzBdID09PSAnXFxuJylcblx0XHRcdFx0XHRudW1XaXRoTisrO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVtV2l0aE4gPj0gci5sZW5ndGggLyAyID8gJ1xcclxcbicgOiAnXFxyJztcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdGVzdEVtcHR5TGluZShzKSB7XG5cdFx0XHRyZXR1cm4gX2NvbmZpZy5za2lwRW1wdHlMaW5lcyA9PT0gJ2dyZWVkeScgPyBzLmpvaW4oJycpLnRyaW0oKSA9PT0gJycgOiBzLmxlbmd0aCA9PT0gMSAmJiBzWzBdLmxlbmd0aCA9PT0gMDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB0ZXN0RmxvYXQocykge1xuXHRcdFx0aWYgKEZMT0FULnRlc3QocykpIHtcblx0XHRcdFx0dmFyIGZsb2F0VmFsdWUgPSBwYXJzZUZsb2F0KHMpO1xuXHRcdFx0XHRpZiAoZmxvYXRWYWx1ZSA+IE1JTl9GTE9BVCAmJiBmbG9hdFZhbHVlIDwgTUFYX0ZMT0FUKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBwcm9jZXNzUmVzdWx0cygpXG5cdFx0e1xuXHRcdFx0aWYgKF9yZXN1bHRzICYmIF9kZWxpbWl0ZXJFcnJvcilcblx0XHRcdHtcblx0XHRcdFx0YWRkRXJyb3IoJ0RlbGltaXRlcicsICdVbmRldGVjdGFibGVEZWxpbWl0ZXInLCAnVW5hYmxlIHRvIGF1dG8tZGV0ZWN0IGRlbGltaXRpbmcgY2hhcmFjdGVyOyBkZWZhdWx0ZWQgdG8gXFwnJyArIFBhcGEuRGVmYXVsdERlbGltaXRlciArICdcXCcnKTtcblx0XHRcdFx0X2RlbGltaXRlckVycm9yID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChfY29uZmlnLnNraXBFbXB0eUxpbmVzKVxuXHRcdFx0e1xuXHRcdFx0XHRfcmVzdWx0cy5kYXRhID0gX3Jlc3VsdHMuZGF0YS5maWx0ZXIoZnVuY3Rpb24oZCkge1xuXHRcdFx0XHRcdHJldHVybiAhdGVzdEVtcHR5TGluZShkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChuZWVkc0hlYWRlclJvdygpKVxuXHRcdFx0XHRmaWxsSGVhZGVyRmllbGRzKCk7XG5cblx0XHRcdHJldHVybiBhcHBseUhlYWRlckFuZER5bmFtaWNUeXBpbmdBbmRUcmFuc2Zvcm1hdGlvbigpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG5lZWRzSGVhZGVyUm93KClcblx0XHR7XG5cdFx0XHRyZXR1cm4gX2NvbmZpZy5oZWFkZXIgJiYgX2ZpZWxkcy5sZW5ndGggPT09IDA7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZmlsbEhlYWRlckZpZWxkcygpXG5cdFx0e1xuXHRcdFx0aWYgKCFfcmVzdWx0cylcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRmdW5jdGlvbiBhZGRIZWFkZXIoaGVhZGVyLCBpKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoaXNGdW5jdGlvbihfY29uZmlnLnRyYW5zZm9ybUhlYWRlcikpXG5cdFx0XHRcdFx0aGVhZGVyID0gX2NvbmZpZy50cmFuc2Zvcm1IZWFkZXIoaGVhZGVyLCBpKTtcblxuXHRcdFx0XHRfZmllbGRzLnB1c2goaGVhZGVyKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoX3Jlc3VsdHMuZGF0YVswXSkpXG5cdFx0XHR7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBuZWVkc0hlYWRlclJvdygpICYmIGkgPCBfcmVzdWx0cy5kYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRcdF9yZXN1bHRzLmRhdGFbaV0uZm9yRWFjaChhZGRIZWFkZXIpO1xuXG5cdFx0XHRcdF9yZXN1bHRzLmRhdGEuc3BsaWNlKDAsIDEpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gaWYgX3Jlc3VsdHMuZGF0YVswXSBpcyBub3QgYW4gYXJyYXksIHdlIGFyZSBpbiBhIHN0ZXAgd2hlcmUgX3Jlc3VsdHMuZGF0YSBpcyB0aGUgcm93LlxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRfcmVzdWx0cy5kYXRhLmZvckVhY2goYWRkSGVhZGVyKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzaG91bGRBcHBseUR5bmFtaWNUeXBpbmcoZmllbGQpIHtcblx0XHRcdC8vIENhY2hlIGZ1bmN0aW9uIHZhbHVlcyB0byBhdm9pZCBjYWxsaW5nIGl0IGZvciBlYWNoIHJvd1xuXHRcdFx0aWYgKF9jb25maWcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uICYmIF9jb25maWcuZHluYW1pY1R5cGluZ1tmaWVsZF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRfY29uZmlnLmR5bmFtaWNUeXBpbmdbZmllbGRdID0gX2NvbmZpZy5keW5hbWljVHlwaW5nRnVuY3Rpb24oZmllbGQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIChfY29uZmlnLmR5bmFtaWNUeXBpbmdbZmllbGRdIHx8IF9jb25maWcuZHluYW1pY1R5cGluZykgPT09IHRydWU7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcGFyc2VEeW5hbWljKGZpZWxkLCB2YWx1ZSlcblx0XHR7XG5cdFx0XHRpZiAoc2hvdWxkQXBwbHlEeW5hbWljVHlwaW5nKGZpZWxkKSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICdUUlVFJylcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0ZWxzZSBpZiAodmFsdWUgPT09ICdmYWxzZScgfHwgdmFsdWUgPT09ICdGQUxTRScpXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRlbHNlIGlmICh0ZXN0RmxvYXQodmFsdWUpKVxuXHRcdFx0XHRcdHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcblx0XHRcdFx0ZWxzZSBpZiAoSVNPX0RBVEUudGVzdCh2YWx1ZSkpXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBEYXRlKHZhbHVlKTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHJldHVybiAodmFsdWUgPT09ICcnID8gbnVsbCA6IHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhcHBseUhlYWRlckFuZER5bmFtaWNUeXBpbmdBbmRUcmFuc2Zvcm1hdGlvbigpXG5cdFx0e1xuXHRcdFx0aWYgKCFfcmVzdWx0cyB8fCAoIV9jb25maWcuaGVhZGVyICYmICFfY29uZmlnLmR5bmFtaWNUeXBpbmcgJiYgIV9jb25maWcudHJhbnNmb3JtKSlcblx0XHRcdFx0cmV0dXJuIF9yZXN1bHRzO1xuXG5cdFx0XHRmdW5jdGlvbiBwcm9jZXNzUm93KHJvd1NvdXJjZSwgaSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIHJvdyA9IF9jb25maWcuaGVhZGVyID8ge30gOiBbXTtcblxuXHRcdFx0XHR2YXIgajtcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IHJvd1NvdXJjZS5sZW5ndGg7IGorKylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHZhciBmaWVsZCA9IGo7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gcm93U291cmNlW2pdO1xuXG5cdFx0XHRcdFx0aWYgKF9jb25maWcuaGVhZGVyKVxuXHRcdFx0XHRcdFx0ZmllbGQgPSBqID49IF9maWVsZHMubGVuZ3RoID8gJ19fcGFyc2VkX2V4dHJhJyA6IF9maWVsZHNbal07XG5cblx0XHRcdFx0XHRpZiAoX2NvbmZpZy50cmFuc2Zvcm0pXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IF9jb25maWcudHJhbnNmb3JtKHZhbHVlLGZpZWxkKTtcblxuXHRcdFx0XHRcdHZhbHVlID0gcGFyc2VEeW5hbWljKGZpZWxkLCB2YWx1ZSk7XG5cblx0XHRcdFx0XHRpZiAoZmllbGQgPT09ICdfX3BhcnNlZF9leHRyYScpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cm93W2ZpZWxkXSA9IHJvd1tmaWVsZF0gfHwgW107XG5cdFx0XHRcdFx0XHRyb3dbZmllbGRdLnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRyb3dbZmllbGRdID0gdmFsdWU7XG5cdFx0XHRcdH1cblxuXG5cdFx0XHRcdGlmIChfY29uZmlnLmhlYWRlcilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChqID4gX2ZpZWxkcy5sZW5ndGgpXG5cdFx0XHRcdFx0XHRhZGRFcnJvcignRmllbGRNaXNtYXRjaCcsICdUb29NYW55RmllbGRzJywgJ1RvbyBtYW55IGZpZWxkczogZXhwZWN0ZWQgJyArIF9maWVsZHMubGVuZ3RoICsgJyBmaWVsZHMgYnV0IHBhcnNlZCAnICsgaiwgX3Jvd0NvdW50ZXIgKyBpKTtcblx0XHRcdFx0XHRlbHNlIGlmIChqIDwgX2ZpZWxkcy5sZW5ndGgpXG5cdFx0XHRcdFx0XHRhZGRFcnJvcignRmllbGRNaXNtYXRjaCcsICdUb29GZXdGaWVsZHMnLCAnVG9vIGZldyBmaWVsZHM6IGV4cGVjdGVkICcgKyBfZmllbGRzLmxlbmd0aCArICcgZmllbGRzIGJ1dCBwYXJzZWQgJyArIGosIF9yb3dDb3VudGVyICsgaSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcm93O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaW5jcmVtZW50QnkgPSAxO1xuXHRcdFx0aWYgKCFfcmVzdWx0cy5kYXRhLmxlbmd0aCB8fCBBcnJheS5pc0FycmF5KF9yZXN1bHRzLmRhdGFbMF0pKVxuXHRcdFx0e1xuXHRcdFx0XHRfcmVzdWx0cy5kYXRhID0gX3Jlc3VsdHMuZGF0YS5tYXAocHJvY2Vzc1Jvdyk7XG5cdFx0XHRcdGluY3JlbWVudEJ5ID0gX3Jlc3VsdHMuZGF0YS5sZW5ndGg7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHRcdF9yZXN1bHRzLmRhdGEgPSBwcm9jZXNzUm93KF9yZXN1bHRzLmRhdGEsIDApO1xuXG5cblx0XHRcdGlmIChfY29uZmlnLmhlYWRlciAmJiBfcmVzdWx0cy5tZXRhKVxuXHRcdFx0XHRfcmVzdWx0cy5tZXRhLmZpZWxkcyA9IF9maWVsZHM7XG5cblx0XHRcdF9yb3dDb3VudGVyICs9IGluY3JlbWVudEJ5O1xuXHRcdFx0cmV0dXJuIF9yZXN1bHRzO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGd1ZXNzRGVsaW1pdGVyKGlucHV0LCBuZXdsaW5lLCBza2lwRW1wdHlMaW5lcywgY29tbWVudHMsIGRlbGltaXRlcnNUb0d1ZXNzKSB7XG5cdFx0XHR2YXIgYmVzdERlbGltLCBiZXN0RGVsdGEsIGZpZWxkQ291bnRQcmV2Um93LCBtYXhGaWVsZENvdW50O1xuXG5cdFx0XHRkZWxpbWl0ZXJzVG9HdWVzcyA9IGRlbGltaXRlcnNUb0d1ZXNzIHx8IFsnLCcsICdcXHQnLCAnfCcsICc7JywgUGFwYS5SRUNPUkRfU0VQLCBQYXBhLlVOSVRfU0VQXTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWxpbWl0ZXJzVG9HdWVzcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgZGVsaW0gPSBkZWxpbWl0ZXJzVG9HdWVzc1tpXTtcblx0XHRcdFx0dmFyIGRlbHRhID0gMCwgYXZnRmllbGRDb3VudCA9IDAsIGVtcHR5TGluZXNDb3VudCA9IDA7XG5cdFx0XHRcdGZpZWxkQ291bnRQcmV2Um93ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdHZhciBwcmV2aWV3ID0gbmV3IFBhcnNlcih7XG5cdFx0XHRcdFx0Y29tbWVudHM6IGNvbW1lbnRzLFxuXHRcdFx0XHRcdGRlbGltaXRlcjogZGVsaW0sXG5cdFx0XHRcdFx0bmV3bGluZTogbmV3bGluZSxcblx0XHRcdFx0XHRwcmV2aWV3OiAxMFxuXHRcdFx0XHR9KS5wYXJzZShpbnB1dCk7XG5cblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBwcmV2aWV3LmRhdGEubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRpZiAoc2tpcEVtcHR5TGluZXMgJiYgdGVzdEVtcHR5TGluZShwcmV2aWV3LmRhdGFbal0pKSB7XG5cdFx0XHRcdFx0XHRlbXB0eUxpbmVzQ291bnQrKztcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgZmllbGRDb3VudCA9IHByZXZpZXcuZGF0YVtqXS5sZW5ndGg7XG5cdFx0XHRcdFx0YXZnRmllbGRDb3VudCArPSBmaWVsZENvdW50O1xuXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBmaWVsZENvdW50UHJldlJvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdGZpZWxkQ291bnRQcmV2Um93ID0gZmllbGRDb3VudDtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmIChmaWVsZENvdW50ID4gMCkge1xuXHRcdFx0XHRcdFx0ZGVsdGEgKz0gTWF0aC5hYnMoZmllbGRDb3VudCAtIGZpZWxkQ291bnRQcmV2Um93KTtcblx0XHRcdFx0XHRcdGZpZWxkQ291bnRQcmV2Um93ID0gZmllbGRDb3VudDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocHJldmlldy5kYXRhLmxlbmd0aCA+IDApXG5cdFx0XHRcdFx0YXZnRmllbGRDb3VudCAvPSAocHJldmlldy5kYXRhLmxlbmd0aCAtIGVtcHR5TGluZXNDb3VudCk7XG5cblx0XHRcdFx0aWYgKCh0eXBlb2YgYmVzdERlbHRhID09PSAndW5kZWZpbmVkJyB8fCBkZWx0YSA8PSBiZXN0RGVsdGEpXG5cdFx0XHRcdFx0JiYgKHR5cGVvZiBtYXhGaWVsZENvdW50ID09PSAndW5kZWZpbmVkJyB8fCBhdmdGaWVsZENvdW50ID4gbWF4RmllbGRDb3VudCkgJiYgYXZnRmllbGRDb3VudCA+IDEuOTkpIHtcblx0XHRcdFx0XHRiZXN0RGVsdGEgPSBkZWx0YTtcblx0XHRcdFx0XHRiZXN0RGVsaW0gPSBkZWxpbTtcblx0XHRcdFx0XHRtYXhGaWVsZENvdW50ID0gYXZnRmllbGRDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRfY29uZmlnLmRlbGltaXRlciA9IGJlc3REZWxpbTtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c3VjY2Vzc2Z1bDogISFiZXN0RGVsaW0sXG5cdFx0XHRcdGJlc3REZWxpbWl0ZXI6IGJlc3REZWxpbVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBhZGRFcnJvcih0eXBlLCBjb2RlLCBtc2csIHJvdylcblx0XHR7XG5cdFx0XHR2YXIgZXJyb3IgPSB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGNvZGU6IGNvZGUsXG5cdFx0XHRcdG1lc3NhZ2U6IG1zZ1xuXHRcdFx0fTtcblx0XHRcdGlmKHJvdyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGVycm9yLnJvdyA9IHJvdztcblx0XHRcdH1cblx0XHRcdF9yZXN1bHRzLmVycm9ycy5wdXNoKGVycm9yKTtcblx0XHR9XG5cdH1cblxuXHQvKiogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZS9SZWd1bGFyX0V4cHJlc3Npb25zICovXG5cdGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpXG5cdHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLCAnXFxcXCQmJyk7IC8vICQmIG1lYW5zIHRoZSB3aG9sZSBtYXRjaGVkIHN0cmluZ1xuXHR9XG5cblx0LyoqIFRoZSBjb3JlIHBhcnNlciBpbXBsZW1lbnRzIHNwZWVkeSBhbmQgY29ycmVjdCBDU1YgcGFyc2luZyAqL1xuXHRmdW5jdGlvbiBQYXJzZXIoY29uZmlnKVxuXHR7XG5cdFx0Ly8gVW5wYWNrIHRoZSBjb25maWcgb2JqZWN0XG5cdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdHZhciBkZWxpbSA9IGNvbmZpZy5kZWxpbWl0ZXI7XG5cdFx0dmFyIG5ld2xpbmUgPSBjb25maWcubmV3bGluZTtcblx0XHR2YXIgY29tbWVudHMgPSBjb25maWcuY29tbWVudHM7XG5cdFx0dmFyIHN0ZXAgPSBjb25maWcuc3RlcDtcblx0XHR2YXIgcHJldmlldyA9IGNvbmZpZy5wcmV2aWV3O1xuXHRcdHZhciBmYXN0TW9kZSA9IGNvbmZpZy5mYXN0TW9kZTtcblx0XHR2YXIgcXVvdGVDaGFyO1xuXHRcdHZhciByZW5hbWVkSGVhZGVycyA9IG51bGw7XG5cdFx0dmFyIGhlYWRlclBhcnNlZCA9IGZhbHNlO1xuXG5cdFx0aWYgKGNvbmZpZy5xdW90ZUNoYXIgPT09IHVuZGVmaW5lZCB8fCBjb25maWcucXVvdGVDaGFyID09PSBudWxsKSB7XG5cdFx0XHRxdW90ZUNoYXIgPSAnXCInO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRxdW90ZUNoYXIgPSBjb25maWcucXVvdGVDaGFyO1xuXHRcdH1cblx0XHR2YXIgZXNjYXBlQ2hhciA9IHF1b3RlQ2hhcjtcblx0XHRpZiAoY29uZmlnLmVzY2FwZUNoYXIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZXNjYXBlQ2hhciA9IGNvbmZpZy5lc2NhcGVDaGFyO1xuXHRcdH1cblxuXHRcdC8vIERlbGltaXRlciBtdXN0IGJlIHZhbGlkXG5cdFx0aWYgKHR5cGVvZiBkZWxpbSAhPT0gJ3N0cmluZydcblx0XHRcdHx8IFBhcGEuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihkZWxpbSkgPiAtMSlcblx0XHRcdGRlbGltID0gJywnO1xuXG5cdFx0Ly8gQ29tbWVudCBjaGFyYWN0ZXIgbXVzdCBiZSB2YWxpZFxuXHRcdGlmIChjb21tZW50cyA9PT0gZGVsaW0pXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NvbW1lbnQgY2hhcmFjdGVyIHNhbWUgYXMgZGVsaW1pdGVyJyk7XG5cdFx0ZWxzZSBpZiAoY29tbWVudHMgPT09IHRydWUpXG5cdFx0XHRjb21tZW50cyA9ICcjJztcblx0XHRlbHNlIGlmICh0eXBlb2YgY29tbWVudHMgIT09ICdzdHJpbmcnXG5cdFx0XHR8fCBQYXBhLkJBRF9ERUxJTUlURVJTLmluZGV4T2YoY29tbWVudHMpID4gLTEpXG5cdFx0XHRjb21tZW50cyA9IGZhbHNlO1xuXG5cdFx0Ly8gTmV3bGluZSBtdXN0IGJlIHZhbGlkOiBcXHIsIFxcbiwgb3IgXFxyXFxuXG5cdFx0aWYgKG5ld2xpbmUgIT09ICdcXG4nICYmIG5ld2xpbmUgIT09ICdcXHInICYmIG5ld2xpbmUgIT09ICdcXHJcXG4nKVxuXHRcdFx0bmV3bGluZSA9ICdcXG4nO1xuXG5cdFx0Ly8gV2UncmUgZ29ubmEgbmVlZCB0aGVzZSBhdCB0aGUgUGFyc2VyIHNjb3BlXG5cdFx0dmFyIGN1cnNvciA9IDA7XG5cdFx0dmFyIGFib3J0ZWQgPSBmYWxzZTtcblxuXHRcdHRoaXMucGFyc2UgPSBmdW5jdGlvbihpbnB1dCwgYmFzZUluZGV4LCBpZ25vcmVMYXN0Um93KVxuXHRcdHtcblx0XHRcdC8vIEZvciBzb21lIHJlYXNvbiwgaW4gQ2hyb21lLCB0aGlzIHNwZWVkcyB0aGluZ3MgdXAgKCE/KVxuXHRcdFx0aWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW5wdXQgbXVzdCBiZSBhIHN0cmluZycpO1xuXG5cdFx0XHQvLyBXZSBkb24ndCBuZWVkIHRvIGNvbXB1dGUgc29tZSBvZiB0aGVzZSBldmVyeSB0aW1lIHBhcnNlKCkgaXMgY2FsbGVkLFxuXHRcdFx0Ly8gYnV0IGhhdmluZyB0aGVtIGluIGEgbW9yZSBsb2NhbCBzY29wZSBzZWVtcyB0byBwZXJmb3JtIGJldHRlclxuXHRcdFx0dmFyIGlucHV0TGVuID0gaW5wdXQubGVuZ3RoLFxuXHRcdFx0XHRkZWxpbUxlbiA9IGRlbGltLmxlbmd0aCxcblx0XHRcdFx0bmV3bGluZUxlbiA9IG5ld2xpbmUubGVuZ3RoLFxuXHRcdFx0XHRjb21tZW50c0xlbiA9IGNvbW1lbnRzLmxlbmd0aDtcblx0XHRcdHZhciBzdGVwSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oc3RlcCk7XG5cblx0XHRcdC8vIEVzdGFibGlzaCBzdGFydGluZyBzdGF0ZVxuXHRcdFx0Y3Vyc29yID0gMDtcblx0XHRcdHZhciBkYXRhID0gW10sIGVycm9ycyA9IFtdLCByb3cgPSBbXSwgbGFzdEN1cnNvciA9IDA7XG5cblx0XHRcdGlmICghaW5wdXQpXG5cdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKCk7XG5cblx0XHRcdGlmIChmYXN0TW9kZSB8fCAoZmFzdE1vZGUgIT09IGZhbHNlICYmIGlucHV0LmluZGV4T2YocXVvdGVDaGFyKSA9PT0gLTEpKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgcm93cyA9IGlucHV0LnNwbGl0KG5ld2xpbmUpO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyb3cgPSByb3dzW2ldO1xuXHRcdFx0XHRcdGN1cnNvciArPSByb3cubGVuZ3RoO1xuXG5cdFx0XHRcdFx0aWYgKGkgIT09IHJvd3MubGVuZ3RoIC0gMSlcblx0XHRcdFx0XHRcdGN1cnNvciArPSBuZXdsaW5lLmxlbmd0aDtcblx0XHRcdFx0XHRlbHNlIGlmIChpZ25vcmVMYXN0Um93KVxuXHRcdFx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblx0XHRcdFx0XHRpZiAoY29tbWVudHMgJiYgcm93LnN1YnN0cmluZygwLCBjb21tZW50c0xlbikgPT09IGNvbW1lbnRzKVxuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0aWYgKHN0ZXBJc0Z1bmN0aW9uKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRhdGEgPSBbXTtcblx0XHRcdFx0XHRcdHB1c2hSb3cocm93LnNwbGl0KGRlbGltKSk7XG5cdFx0XHRcdFx0XHRkb1N0ZXAoKTtcblx0XHRcdFx0XHRcdGlmIChhYm9ydGVkKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmV0dXJuYWJsZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRwdXNoUm93KHJvdy5zcGxpdChkZWxpbSkpO1xuXHRcdFx0XHRcdGlmIChwcmV2aWV3ICYmIGkgPj0gcHJldmlldylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRkYXRhID0gZGF0YS5zbGljZSgwLCBwcmV2aWV3KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmV0dXJuYWJsZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgY3Vyc29yKTtcblx0XHRcdHZhciBuZXh0TmV3bGluZSA9IGlucHV0LmluZGV4T2YobmV3bGluZSwgY3Vyc29yKTtcblx0XHRcdHZhciBxdW90ZUNoYXJSZWdleCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKGVzY2FwZUNoYXIpICsgZXNjYXBlUmVnRXhwKHF1b3RlQ2hhciksICdnJyk7XG5cdFx0XHR2YXIgcXVvdGVTZWFyY2ggPSBpbnB1dC5pbmRleE9mKHF1b3RlQ2hhciwgY3Vyc29yKTtcblxuXHRcdFx0Ly8gUGFyc2VyIGxvb3Bcblx0XHRcdGZvciAoOzspXG5cdFx0XHR7XG5cdFx0XHRcdC8vIEZpZWxkIGhhcyBvcGVuaW5nIHF1b3RlXG5cdFx0XHRcdGlmIChpbnB1dFtjdXJzb3JdID09PSBxdW90ZUNoYXIpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvLyBTdGFydCBvdXIgc2VhcmNoIGZvciB0aGUgY2xvc2luZyBxdW90ZSB3aGVyZSB0aGUgY3Vyc29yIGlzXG5cdFx0XHRcdFx0cXVvdGVTZWFyY2ggPSBjdXJzb3I7XG5cblx0XHRcdFx0XHQvLyBTa2lwIHRoZSBvcGVuaW5nIHF1b3RlXG5cdFx0XHRcdFx0Y3Vyc29yKys7XG5cblx0XHRcdFx0XHRmb3IgKDs7KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIEZpbmQgY2xvc2luZyBxdW90ZVxuXHRcdFx0XHRcdFx0cXVvdGVTZWFyY2ggPSBpbnB1dC5pbmRleE9mKHF1b3RlQ2hhciwgcXVvdGVTZWFyY2ggKyAxKTtcblxuXHRcdFx0XHRcdFx0Ly9ObyBvdGhlciBxdW90ZXMgYXJlIGZvdW5kIC0gbm8gb3RoZXIgZGVsaW1pdGVyc1xuXHRcdFx0XHRcdFx0aWYgKHF1b3RlU2VhcmNoID09PSAtMSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0aWYgKCFpZ25vcmVMYXN0Um93KSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTm8gY2xvc2luZyBxdW90ZS4uLiB3aGF0IGEgcGl0eVxuXHRcdFx0XHRcdFx0XHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6ICdRdW90ZXMnLFxuXHRcdFx0XHRcdFx0XHRcdFx0Y29kZTogJ01pc3NpbmdRdW90ZXMnLFxuXHRcdFx0XHRcdFx0XHRcdFx0bWVzc2FnZTogJ1F1b3RlZCBmaWVsZCB1bnRlcm1pbmF0ZWQnLFxuXHRcdFx0XHRcdFx0XHRcdFx0cm93OiBkYXRhLmxlbmd0aCxcdC8vIHJvdyBoYXMgeWV0IHRvIGJlIGluc2VydGVkXG5cdFx0XHRcdFx0XHRcdFx0XHRpbmRleDogY3Vyc29yXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZpbmlzaCgpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBDbG9zaW5nIHF1b3RlIGF0IEVPRlxuXHRcdFx0XHRcdFx0aWYgKHF1b3RlU2VhcmNoID09PSBpbnB1dExlbiAtIDEpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9IGlucHV0LnN1YnN0cmluZyhjdXJzb3IsIHF1b3RlU2VhcmNoKS5yZXBsYWNlKHF1b3RlQ2hhclJlZ2V4LCBxdW90ZUNoYXIpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmluaXNoKHZhbHVlKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhpcyBxdW90ZSBpcyBlc2NhcGVkLCBpdCdzIHBhcnQgb2YgdGhlIGRhdGE7IHNraXAgaXRcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBxdW90ZSBjaGFyYWN0ZXIgaXMgdGhlIGVzY2FwZSBjaGFyYWN0ZXIsIHRoZW4gY2hlY2sgaWYgdGhlIG5leHQgY2hhcmFjdGVyIGlzIHRoZSBlc2NhcGUgY2hhcmFjdGVyXG5cdFx0XHRcdFx0XHRpZiAocXVvdGVDaGFyID09PSBlc2NhcGVDaGFyICYmICBpbnB1dFtxdW90ZVNlYXJjaCArIDFdID09PSBlc2NhcGVDaGFyKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRxdW90ZVNlYXJjaCsrO1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHF1b3RlIGNoYXJhY3RlciBpcyBub3QgdGhlIGVzY2FwZSBjaGFyYWN0ZXIsIHRoZW4gY2hlY2sgaWYgdGhlIHByZXZpb3VzIGNoYXJhY3RlciB3YXMgdGhlIGVzY2FwZSBjaGFyYWN0ZXJcblx0XHRcdFx0XHRcdGlmIChxdW90ZUNoYXIgIT09IGVzY2FwZUNoYXIgJiYgcXVvdGVTZWFyY2ggIT09IDAgJiYgaW5wdXRbcXVvdGVTZWFyY2ggLSAxXSA9PT0gZXNjYXBlQ2hhcilcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKG5leHREZWxpbSAhPT0gLTEgJiYgbmV4dERlbGltIDwgKHF1b3RlU2VhcmNoICsgMSkpIHtcblx0XHRcdFx0XHRcdFx0bmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgKHF1b3RlU2VhcmNoICsgMSkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYobmV4dE5ld2xpbmUgIT09IC0xICYmIG5leHROZXdsaW5lIDwgKHF1b3RlU2VhcmNoICsgMSkpIHtcblx0XHRcdFx0XHRcdFx0bmV4dE5ld2xpbmUgPSBpbnB1dC5pbmRleE9mKG5ld2xpbmUsIChxdW90ZVNlYXJjaCArIDEpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIENoZWNrIHVwIHRvIG5leHREZWxpbSBvciBuZXh0TmV3bGluZSwgd2hpY2hldmVyIGlzIGNsb3Nlc3Rcblx0XHRcdFx0XHRcdHZhciBjaGVja1VwVG8gPSBuZXh0TmV3bGluZSA9PT0gLTEgPyBuZXh0RGVsaW0gOiBNYXRoLm1pbihuZXh0RGVsaW0sIG5leHROZXdsaW5lKTtcblx0XHRcdFx0XHRcdHZhciBzcGFjZXNCZXR3ZWVuUXVvdGVBbmREZWxpbWl0ZXIgPSBleHRyYVNwYWNlcyhjaGVja1VwVG8pO1xuXG5cdFx0XHRcdFx0XHQvLyBDbG9zaW5nIHF1b3RlIGZvbGxvd2VkIGJ5IGRlbGltaXRlciBvciAndW5uZWNlc3Nhcnkgc3BhY2VzICsgZGVsaW1pdGVyJ1xuXHRcdFx0XHRcdFx0aWYgKGlucHV0LnN1YnN0cihxdW90ZVNlYXJjaCArIDEgKyBzcGFjZXNCZXR3ZWVuUXVvdGVBbmREZWxpbWl0ZXIsIGRlbGltTGVuKSA9PT0gZGVsaW0pXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHJvdy5wdXNoKGlucHV0LnN1YnN0cmluZyhjdXJzb3IsIHF1b3RlU2VhcmNoKS5yZXBsYWNlKHF1b3RlQ2hhclJlZ2V4LCBxdW90ZUNoYXIpKTtcblx0XHRcdFx0XHRcdFx0Y3Vyc29yID0gcXVvdGVTZWFyY2ggKyAxICsgc3BhY2VzQmV0d2VlblF1b3RlQW5kRGVsaW1pdGVyICsgZGVsaW1MZW47XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgY2hhciBhZnRlciBmb2xsb3dpbmcgZGVsaW1pdGVyIGlzIG5vdCBxdW90ZUNoYXIsIHdlIGZpbmQgbmV4dCBxdW90ZSBjaGFyIHBvc2l0aW9uXG5cdFx0XHRcdFx0XHRcdGlmIChpbnB1dFtxdW90ZVNlYXJjaCArIDEgKyBzcGFjZXNCZXR3ZWVuUXVvdGVBbmREZWxpbWl0ZXIgKyBkZWxpbUxlbl0gIT09IHF1b3RlQ2hhcilcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdHF1b3RlU2VhcmNoID0gaW5wdXQuaW5kZXhPZihxdW90ZUNoYXIsIGN1cnNvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgY3Vyc29yKTtcblx0XHRcdFx0XHRcdFx0bmV4dE5ld2xpbmUgPSBpbnB1dC5pbmRleE9mKG5ld2xpbmUsIGN1cnNvcik7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgc3BhY2VzQmV0d2VlblF1b3RlQW5kTmV3TGluZSA9IGV4dHJhU3BhY2VzKG5leHROZXdsaW5lKTtcblxuXHRcdFx0XHRcdFx0Ly8gQ2xvc2luZyBxdW90ZSBmb2xsb3dlZCBieSBuZXdsaW5lIG9yICd1bm5lY2Vzc2FyeSBzcGFjZXMgKyBuZXdMaW5lJ1xuXHRcdFx0XHRcdFx0aWYgKGlucHV0LnN1YnN0cmluZyhxdW90ZVNlYXJjaCArIDEgKyBzcGFjZXNCZXR3ZWVuUXVvdGVBbmROZXdMaW5lLCBxdW90ZVNlYXJjaCArIDEgKyBzcGFjZXNCZXR3ZWVuUXVvdGVBbmROZXdMaW5lICsgbmV3bGluZUxlbikgPT09IG5ld2xpbmUpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHJvdy5wdXNoKGlucHV0LnN1YnN0cmluZyhjdXJzb3IsIHF1b3RlU2VhcmNoKS5yZXBsYWNlKHF1b3RlQ2hhclJlZ2V4LCBxdW90ZUNoYXIpKTtcblx0XHRcdFx0XHRcdFx0c2F2ZVJvdyhxdW90ZVNlYXJjaCArIDEgKyBzcGFjZXNCZXR3ZWVuUXVvdGVBbmROZXdMaW5lICsgbmV3bGluZUxlbik7XG5cdFx0XHRcdFx0XHRcdG5leHREZWxpbSA9IGlucHV0LmluZGV4T2YoZGVsaW0sIGN1cnNvcik7XHQvLyBiZWNhdXNlIHdlIG1heSBoYXZlIHNraXBwZWQgdGhlIG5leHREZWxpbSBpbiB0aGUgcXVvdGVkIGZpZWxkXG5cdFx0XHRcdFx0XHRcdHF1b3RlU2VhcmNoID0gaW5wdXQuaW5kZXhPZihxdW90ZUNoYXIsIGN1cnNvcik7XHQvLyB3ZSBzZWFyY2ggZm9yIGZpcnN0IHF1b3RlIGluIG5leHQgbGluZVxuXG5cdFx0XHRcdFx0XHRcdGlmIChzdGVwSXNGdW5jdGlvbilcblx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdGRvU3RlcCgpO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChhYm9ydGVkKVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmIChwcmV2aWV3ICYmIGRhdGEubGVuZ3RoID49IHByZXZpZXcpXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUodHJ1ZSk7XG5cblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2tzIGZvciB2YWxpZCBjbG9zaW5nIHF1b3RlcyBhcmUgY29tcGxldGUgKGVzY2FwZWQgcXVvdGVzIG9yIHF1b3RlIGZvbGxvd2VkIGJ5IEVPRi9kZWxpbWl0ZXIvbmV3bGluZSkgLS0gYXNzdW1lIHRoZXNlIHF1b3RlcyBhcmUgcGFydCBvZiBhbiBpbnZhbGlkIHRleHQgc3RyaW5nXG5cdFx0XHRcdFx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICdRdW90ZXMnLFxuXHRcdFx0XHRcdFx0XHRjb2RlOiAnSW52YWxpZFF1b3RlcycsXG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdUcmFpbGluZyBxdW90ZSBvbiBxdW90ZWQgZmllbGQgaXMgbWFsZm9ybWVkJyxcblx0XHRcdFx0XHRcdFx0cm93OiBkYXRhLmxlbmd0aCxcdC8vIHJvdyBoYXMgeWV0IHRvIGJlIGluc2VydGVkXG5cdFx0XHRcdFx0XHRcdGluZGV4OiBjdXJzb3Jcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRxdW90ZVNlYXJjaCsrO1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENvbW1lbnQgZm91bmQgYXQgc3RhcnQgb2YgbmV3IGxpbmVcblx0XHRcdFx0aWYgKGNvbW1lbnRzICYmIHJvdy5sZW5ndGggPT09IDAgJiYgaW5wdXQuc3Vic3RyaW5nKGN1cnNvciwgY3Vyc29yICsgY29tbWVudHNMZW4pID09PSBjb21tZW50cylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChuZXh0TmV3bGluZSA9PT0gLTEpXHQvLyBDb21tZW50IGVuZHMgYXQgRU9GXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0dXJuYWJsZSgpO1xuXHRcdFx0XHRcdGN1cnNvciA9IG5leHROZXdsaW5lICsgbmV3bGluZUxlbjtcblx0XHRcdFx0XHRuZXh0TmV3bGluZSA9IGlucHV0LmluZGV4T2YobmV3bGluZSwgY3Vyc29yKTtcblx0XHRcdFx0XHRuZXh0RGVsaW0gPSBpbnB1dC5pbmRleE9mKGRlbGltLCBjdXJzb3IpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTmV4dCBkZWxpbWl0ZXIgY29tZXMgYmVmb3JlIG5leHQgbmV3bGluZSwgc28gd2UndmUgcmVhY2hlZCBlbmQgb2YgZmllbGRcblx0XHRcdFx0aWYgKG5leHREZWxpbSAhPT0gLTEgJiYgKG5leHREZWxpbSA8IG5leHROZXdsaW5lIHx8IG5leHROZXdsaW5lID09PSAtMSkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyb3cucHVzaChpbnB1dC5zdWJzdHJpbmcoY3Vyc29yLCBuZXh0RGVsaW0pKTtcblx0XHRcdFx0XHRjdXJzb3IgPSBuZXh0RGVsaW0gKyBkZWxpbUxlbjtcblx0XHRcdFx0XHQvLyB3ZSBsb29rIGZvciBuZXh0IGRlbGltaXRlciBjaGFyXG5cdFx0XHRcdFx0bmV4dERlbGltID0gaW5wdXQuaW5kZXhPZihkZWxpbSwgY3Vyc29yKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEVuZCBvZiByb3dcblx0XHRcdFx0aWYgKG5leHROZXdsaW5lICE9PSAtMSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJvdy5wdXNoKGlucHV0LnN1YnN0cmluZyhjdXJzb3IsIG5leHROZXdsaW5lKSk7XG5cdFx0XHRcdFx0c2F2ZVJvdyhuZXh0TmV3bGluZSArIG5ld2xpbmVMZW4pO1xuXG5cdFx0XHRcdFx0aWYgKHN0ZXBJc0Z1bmN0aW9uKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRvU3RlcCgpO1xuXHRcdFx0XHRcdFx0aWYgKGFib3J0ZWQpXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHByZXZpZXcgJiYgZGF0YS5sZW5ndGggPj0gcHJldmlldylcblx0XHRcdFx0XHRcdHJldHVybiByZXR1cm5hYmxlKHRydWUpO1xuXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZpbmlzaCgpO1xuXG5cblx0XHRcdGZ1bmN0aW9uIHB1c2hSb3cocm93KVxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhLnB1c2gocm93KTtcblx0XHRcdFx0bGFzdEN1cnNvciA9IGN1cnNvcjtcblx0XHRcdH1cblxuXHRcdFx0LyoqXG4gICAgICAgICAgICAgKiBjaGVja3MgaWYgdGhlcmUgYXJlIGV4dHJhIHNwYWNlcyBhZnRlciBjbG9zaW5nIHF1b3RlIGFuZCBnaXZlbiBpbmRleCB3aXRob3V0IGFueSB0ZXh0XG4gICAgICAgICAgICAgKiBpZiBZZXMsIHJldHVybnMgdGhlIG51bWJlciBvZiBzcGFjZXNcbiAgICAgICAgICAgICAqL1xuXHRcdFx0ZnVuY3Rpb24gZXh0cmFTcGFjZXMoaW5kZXgpIHtcblx0XHRcdFx0dmFyIHNwYWNlTGVuZ3RoID0gMDtcblx0XHRcdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0XHRcdHZhciB0ZXh0QmV0d2VlbkNsb3NpbmdRdW90ZUFuZEluZGV4ID0gaW5wdXQuc3Vic3RyaW5nKHF1b3RlU2VhcmNoICsgMSwgaW5kZXgpO1xuXHRcdFx0XHRcdGlmICh0ZXh0QmV0d2VlbkNsb3NpbmdRdW90ZUFuZEluZGV4ICYmIHRleHRCZXR3ZWVuQ2xvc2luZ1F1b3RlQW5kSW5kZXgudHJpbSgpID09PSAnJykge1xuXHRcdFx0XHRcdFx0c3BhY2VMZW5ndGggPSB0ZXh0QmV0d2VlbkNsb3NpbmdRdW90ZUFuZEluZGV4Lmxlbmd0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNwYWNlTGVuZ3RoO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEFwcGVuZHMgdGhlIHJlbWFpbmluZyBpbnB1dCBmcm9tIGN1cnNvciB0byB0aGUgZW5kIGludG9cblx0XHRcdCAqIHJvdywgc2F2ZXMgdGhlIHJvdywgY2FsbHMgc3RlcCwgYW5kIHJldHVybnMgdGhlIHJlc3VsdHMuXG5cdFx0XHQgKi9cblx0XHRcdGZ1bmN0aW9uIGZpbmlzaCh2YWx1ZSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKGlnbm9yZUxhc3RSb3cpXG5cdFx0XHRcdFx0cmV0dXJuIHJldHVybmFibGUoKTtcblx0XHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpXG5cdFx0XHRcdFx0dmFsdWUgPSBpbnB1dC5zdWJzdHJpbmcoY3Vyc29yKTtcblx0XHRcdFx0cm93LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjdXJzb3IgPSBpbnB1dExlbjtcdC8vIGltcG9ydGFudCBpbiBjYXNlIHBhcnNpbmcgaXMgcGF1c2VkXG5cdFx0XHRcdHB1c2hSb3cocm93KTtcblx0XHRcdFx0aWYgKHN0ZXBJc0Z1bmN0aW9uKVxuXHRcdFx0XHRcdGRvU3RlcCgpO1xuXHRcdFx0XHRyZXR1cm4gcmV0dXJuYWJsZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEFwcGVuZHMgdGhlIGN1cnJlbnQgcm93IHRvIHRoZSByZXN1bHRzLiBJdCBzZXRzIHRoZSBjdXJzb3Jcblx0XHRcdCAqIHRvIG5ld0N1cnNvciBhbmQgZmluZHMgdGhlIG5leHROZXdsaW5lLiBUaGUgY2FsbGVyIHNob3VsZFxuXHRcdFx0ICogdGFrZSBjYXJlIHRvIGV4ZWN1dGUgdXNlcidzIHN0ZXAgZnVuY3Rpb24gYW5kIGNoZWNrIGZvclxuXHRcdFx0ICogcHJldmlldyBhbmQgZW5kIHBhcnNpbmcgaWYgbmVjZXNzYXJ5LlxuXHRcdFx0ICovXG5cdFx0XHRmdW5jdGlvbiBzYXZlUm93KG5ld0N1cnNvcilcblx0XHRcdHtcblx0XHRcdFx0Y3Vyc29yID0gbmV3Q3Vyc29yO1xuXHRcdFx0XHRwdXNoUm93KHJvdyk7XG5cdFx0XHRcdHJvdyA9IFtdO1xuXHRcdFx0XHRuZXh0TmV3bGluZSA9IGlucHV0LmluZGV4T2YobmV3bGluZSwgY3Vyc29yKTtcblx0XHRcdH1cblxuXHRcdFx0LyoqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHJlc3VsdHMsIGVycm9ycywgYW5kIG1ldGEuICovXG5cdFx0XHRmdW5jdGlvbiByZXR1cm5hYmxlKHN0b3BwZWQpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChjb25maWcuaGVhZGVyICYmICFiYXNlSW5kZXggJiYgZGF0YS5sZW5ndGggJiYgIWhlYWRlclBhcnNlZClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IGRhdGFbMF07XG5cdFx0XHRcdFx0Y29uc3QgaGVhZGVyQ291bnQgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBUbyB0cmFjayB0aGUgY291bnQgb2YgZWFjaCBiYXNlIGhlYWRlclxuXHRcdFx0XHRcdGNvbnN0IHVzZWRIZWFkZXJzID0gbmV3IFNldChyZXN1bHQpOyAvLyBUbyB0cmFjayB1c2VkIGhlYWRlcnMgYW5kIGF2b2lkIGR1cGxpY2F0ZXNcblx0XHRcdFx0XHRsZXQgZHVwbGljYXRlSGVhZGVycyA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdGxldCBoZWFkZXIgPSByZXN1bHRbaV07XG5cdFx0XHRcdFx0XHRpZiAoaXNGdW5jdGlvbihjb25maWcudHJhbnNmb3JtSGVhZGVyKSlcblx0XHRcdFx0XHRcdFx0aGVhZGVyID0gY29uZmlnLnRyYW5zZm9ybUhlYWRlcihoZWFkZXIsIGkpO1xuXG5cdFx0XHRcdFx0XHRpZiAoIWhlYWRlckNvdW50W2hlYWRlcl0pIHtcblx0XHRcdFx0XHRcdFx0aGVhZGVyQ291bnRbaGVhZGVyXSA9IDE7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdFtpXSA9IGhlYWRlcjtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGxldCBuZXdIZWFkZXI7XG5cdFx0XHRcdFx0XHRcdGxldCBzdWZmaXhDb3VudCA9IGhlYWRlckNvdW50W2hlYWRlcl07XG5cblx0XHRcdFx0XHRcdFx0Ly8gRmluZCBhIHVuaXF1ZSBuZXcgaGVhZGVyXG5cdFx0XHRcdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRcdFx0XHRuZXdIZWFkZXIgPSBgJHtoZWFkZXJ9XyR7c3VmZml4Q291bnR9YDtcblx0XHRcdFx0XHRcdFx0XHRzdWZmaXhDb3VudCsrO1xuXHRcdFx0XHRcdFx0XHR9IHdoaWxlICh1c2VkSGVhZGVycy5oYXMobmV3SGVhZGVyKSk7XG5cblx0XHRcdFx0XHRcdFx0dXNlZEhlYWRlcnMuYWRkKG5ld0hlYWRlcik7IC8vIE1hcmsgdGhpcyBuZXcgSGVhZGVyIGFzIHVzZWRcblx0XHRcdFx0XHRcdFx0cmVzdWx0W2ldID0gbmV3SGVhZGVyO1xuXHRcdFx0XHRcdFx0XHRoZWFkZXJDb3VudFtoZWFkZXJdKys7XG5cdFx0XHRcdFx0XHRcdGR1cGxpY2F0ZUhlYWRlcnMgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpZiAocmVuYW1lZEhlYWRlcnMgPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRyZW5hbWVkSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJlbmFtZWRIZWFkZXJzW25ld0hlYWRlcl0gPSBoZWFkZXI7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHVzZWRIZWFkZXJzLmFkZChoZWFkZXIpOyAvLyBFbnN1cmUgdGhlIG9yaWdpbmFsIGhlYWRlciBpcyBtYXJrZWQgYXMgdXNlZFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZHVwbGljYXRlSGVhZGVycykge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCdEdXBsaWNhdGUgaGVhZGVycyBmb3VuZCBhbmQgcmVuYW1lZC4nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aGVhZGVyUGFyc2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdFx0ZXJyb3JzOiBlcnJvcnMsXG5cdFx0XHRcdFx0bWV0YToge1xuXHRcdFx0XHRcdFx0ZGVsaW1pdGVyOiBkZWxpbSxcblx0XHRcdFx0XHRcdGxpbmVicmVhazogbmV3bGluZSxcblx0XHRcdFx0XHRcdGFib3J0ZWQ6IGFib3J0ZWQsXG5cdFx0XHRcdFx0XHR0cnVuY2F0ZWQ6ICEhc3RvcHBlZCxcblx0XHRcdFx0XHRcdGN1cnNvcjogbGFzdEN1cnNvciArIChiYXNlSW5kZXggfHwgMCksXG5cdFx0XHRcdFx0XHRyZW5hbWVkSGVhZGVyczogcmVuYW1lZEhlYWRlcnNcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdC8qKiBFeGVjdXRlcyB0aGUgdXNlcidzIHN0ZXAgZnVuY3Rpb24gYW5kIHJlc2V0cyBkYXRhICYgZXJyb3JzLiAqL1xuXHRcdFx0ZnVuY3Rpb24gZG9TdGVwKClcblx0XHRcdHtcblx0XHRcdFx0c3RlcChyZXR1cm5hYmxlKCkpO1xuXHRcdFx0XHRkYXRhID0gW107XG5cdFx0XHRcdGVycm9ycyA9IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvKiogU2V0cyB0aGUgYWJvcnQgZmxhZyAqL1xuXHRcdHRoaXMuYWJvcnQgPSBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdFx0YWJvcnRlZCA9IHRydWU7XG5cdFx0fTtcblxuXHRcdC8qKiBHZXRzIHRoZSBjdXJzb3IgcG9zaXRpb24gKi9cblx0XHR0aGlzLmdldENoYXJJbmRleCA9IGZ1bmN0aW9uKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gY3Vyc29yO1xuXHRcdH07XG5cdH1cblxuXG5cdGZ1bmN0aW9uIG5ld1dvcmtlcigpXG5cdHtcblx0XHRpZiAoIVBhcGEuV09SS0VSU19TVVBQT1JURUQpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR2YXIgd29ya2VyVXJsID0gZ2V0V29ya2VyQmxvYigpO1xuXHRcdHZhciB3ID0gbmV3IGdsb2JhbC5Xb3JrZXIod29ya2VyVXJsKTtcblx0XHR3Lm9ubWVzc2FnZSA9IG1haW5UaHJlYWRSZWNlaXZlZE1lc3NhZ2U7XG5cdFx0dy5pZCA9IHdvcmtlcklkQ291bnRlcisrO1xuXHRcdHdvcmtlcnNbdy5pZF0gPSB3O1xuXHRcdHJldHVybiB3O1xuXHR9XG5cblx0LyoqIENhbGxiYWNrIHdoZW4gbWFpbiB0aHJlYWQgcmVjZWl2ZXMgYSBtZXNzYWdlICovXG5cdGZ1bmN0aW9uIG1haW5UaHJlYWRSZWNlaXZlZE1lc3NhZ2UoZSlcblx0e1xuXHRcdHZhciBtc2cgPSBlLmRhdGE7XG5cdFx0dmFyIHdvcmtlciA9IHdvcmtlcnNbbXNnLndvcmtlcklkXTtcblx0XHR2YXIgYWJvcnRlZCA9IGZhbHNlO1xuXG5cdFx0aWYgKG1zZy5lcnJvcilcblx0XHRcdHdvcmtlci51c2VyRXJyb3IobXNnLmVycm9yLCBtc2cuZmlsZSk7XG5cdFx0ZWxzZSBpZiAobXNnLnJlc3VsdHMgJiYgbXNnLnJlc3VsdHMuZGF0YSlcblx0XHR7XG5cdFx0XHR2YXIgYWJvcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0YWJvcnRlZCA9IHRydWU7XG5cdFx0XHRcdGNvbXBsZXRlV29ya2VyKG1zZy53b3JrZXJJZCwgeyBkYXRhOiBbXSwgZXJyb3JzOiBbXSwgbWV0YTogeyBhYm9ydGVkOiB0cnVlIH0gfSk7XG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgaGFuZGxlID0ge1xuXHRcdFx0XHRhYm9ydDogYWJvcnQsXG5cdFx0XHRcdHBhdXNlOiBub3RJbXBsZW1lbnRlZCxcblx0XHRcdFx0cmVzdW1lOiBub3RJbXBsZW1lbnRlZFxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKGlzRnVuY3Rpb24od29ya2VyLnVzZXJTdGVwKSlcblx0XHRcdHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtc2cucmVzdWx0cy5kYXRhLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0d29ya2VyLnVzZXJTdGVwKHtcblx0XHRcdFx0XHRcdGRhdGE6IG1zZy5yZXN1bHRzLmRhdGFbaV0sXG5cdFx0XHRcdFx0XHRlcnJvcnM6IG1zZy5yZXN1bHRzLmVycm9ycyxcblx0XHRcdFx0XHRcdG1ldGE6IG1zZy5yZXN1bHRzLm1ldGFcblx0XHRcdFx0XHR9LCBoYW5kbGUpO1xuXHRcdFx0XHRcdGlmIChhYm9ydGVkKVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG1zZy5yZXN1bHRzO1x0Ly8gZnJlZSBtZW1vcnkgQVNBUFxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoaXNGdW5jdGlvbih3b3JrZXIudXNlckNodW5rKSlcblx0XHRcdHtcblx0XHRcdFx0d29ya2VyLnVzZXJDaHVuayhtc2cucmVzdWx0cywgaGFuZGxlLCBtc2cuZmlsZSk7XG5cdFx0XHRcdGRlbGV0ZSBtc2cucmVzdWx0cztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAobXNnLmZpbmlzaGVkICYmICFhYm9ydGVkKVxuXHRcdFx0Y29tcGxldGVXb3JrZXIobXNnLndvcmtlcklkLCBtc2cucmVzdWx0cyk7XG5cdH1cblxuXHRmdW5jdGlvbiBjb21wbGV0ZVdvcmtlcih3b3JrZXJJZCwgcmVzdWx0cykge1xuXHRcdHZhciB3b3JrZXIgPSB3b3JrZXJzW3dvcmtlcklkXTtcblx0XHRpZiAoaXNGdW5jdGlvbih3b3JrZXIudXNlckNvbXBsZXRlKSlcblx0XHRcdHdvcmtlci51c2VyQ29tcGxldGUocmVzdWx0cyk7XG5cdFx0d29ya2VyLnRlcm1pbmF0ZSgpO1xuXHRcdGRlbGV0ZSB3b3JrZXJzW3dvcmtlcklkXTtcblx0fVxuXG5cdGZ1bmN0aW9uIG5vdEltcGxlbWVudGVkKCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkLicpO1xuXHR9XG5cblx0LyoqIENhbGxiYWNrIHdoZW4gd29ya2VyIHRocmVhZCByZWNlaXZlcyBhIG1lc3NhZ2UgKi9cblx0ZnVuY3Rpb24gd29ya2VyVGhyZWFkUmVjZWl2ZWRNZXNzYWdlKGUpXG5cdHtcblx0XHR2YXIgbXNnID0gZS5kYXRhO1xuXG5cdFx0aWYgKHR5cGVvZiBQYXBhLldPUktFUl9JRCA9PT0gJ3VuZGVmaW5lZCcgJiYgbXNnKVxuXHRcdFx0UGFwYS5XT1JLRVJfSUQgPSBtc2cud29ya2VySWQ7XG5cblx0XHRpZiAodHlwZW9mIG1zZy5pbnB1dCA9PT0gJ3N0cmluZycpXG5cdFx0e1xuXHRcdFx0Z2xvYmFsLnBvc3RNZXNzYWdlKHtcblx0XHRcdFx0d29ya2VySWQ6IFBhcGEuV09SS0VSX0lELFxuXHRcdFx0XHRyZXN1bHRzOiBQYXBhLnBhcnNlKG1zZy5pbnB1dCwgbXNnLmNvbmZpZyksXG5cdFx0XHRcdGZpbmlzaGVkOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGdsb2JhbC5GaWxlICYmIG1zZy5pbnB1dCBpbnN0YW5jZW9mIEZpbGUpIHx8IG1zZy5pbnB1dCBpbnN0YW5jZW9mIE9iamVjdClcdC8vIHRoYW5rIHlvdSwgU2FmYXJpIChzZWUgaXNzdWUgIzEwNilcblx0XHR7XG5cdFx0XHR2YXIgcmVzdWx0cyA9IFBhcGEucGFyc2UobXNnLmlucHV0LCBtc2cuY29uZmlnKTtcblx0XHRcdGlmIChyZXN1bHRzKVxuXHRcdFx0XHRnbG9iYWwucG9zdE1lc3NhZ2Uoe1xuXHRcdFx0XHRcdHdvcmtlcklkOiBQYXBhLldPUktFUl9JRCxcblx0XHRcdFx0XHRyZXN1bHRzOiByZXN1bHRzLFxuXHRcdFx0XHRcdGZpbmlzaGVkOiB0cnVlXG5cdFx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKiBNYWtlcyBhIGRlZXAgY29weSBvZiBhbiBhcnJheSBvciBvYmplY3QgKG1vc3RseSkgKi9cblx0ZnVuY3Rpb24gY29weShvYmopXG5cdHtcblx0XHRpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKVxuXHRcdFx0cmV0dXJuIG9iajtcblx0XHR2YXIgY3B5ID0gQXJyYXkuaXNBcnJheShvYmopID8gW10gOiB7fTtcblx0XHRmb3IgKHZhciBrZXkgaW4gb2JqKVxuXHRcdFx0Y3B5W2tleV0gPSBjb3B5KG9ialtrZXldKTtcblx0XHRyZXR1cm4gY3B5O1xuXHR9XG5cblx0ZnVuY3Rpb24gYmluZEZ1bmN0aW9uKGYsIHNlbGYpXG5cdHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7IGYuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTsgfTtcblx0fVxuXHRmdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmMpXG5cdHtcblx0XHRyZXR1cm4gdHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbic7XG5cdH1cblxuXHRyZXR1cm4gUGFwYTtcbn0pKTtcbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJQYXBhIiwibW9kdWxlRmFjdG9yeSIsImdsb2JhbCIsInNlbGYiLCJ3aW5kb3ciLCJnZXRXb3JrZXJCbG9iIiwiVVJMIiwid2Via2l0VVJMIiwiY29kZSIsInRvU3RyaW5nIiwiQkxPQl9VUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJCbG9iIiwidHlwZSIsIklTX1dPUktFUiIsImRvY3VtZW50IiwicG9zdE1lc3NhZ2UiLCJJU19QQVBBX1dPUktFUiIsIndvcmtlcnMiLCJ3b3JrZXJJZENvdW50ZXIiLCJwYXJzZSIsIkNzdlRvSnNvbiIsInVucGFyc2UiLCJKc29uVG9Dc3YiLCJSRUNPUkRfU0VQIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiVU5JVF9TRVAiLCJCWVRFX09SREVSX01BUksiLCJCQURfREVMSU1JVEVSUyIsIldPUktFUlNfU1VQUE9SVEVEIiwiV29ya2VyIiwiTk9ERV9TVFJFQU1fSU5QVVQiLCJMb2NhbENodW5rU2l6ZSIsIlJlbW90ZUNodW5rU2l6ZSIsIkRlZmF1bHREZWxpbWl0ZXIiLCJQYXJzZXIiLCJQYXJzZXJIYW5kbGUiLCJOZXR3b3JrU3RyZWFtZXIiLCJGaWxlU3RyZWFtZXIiLCJTdHJpbmdTdHJlYW1lciIsIlJlYWRhYmxlU3RyZWFtU3RyZWFtZXIiLCJQQVBBX0JST1dTRVJfQ09OVEVYVCIsIkR1cGxleFN0cmVhbVN0cmVhbWVyIiwialF1ZXJ5IiwiJCIsImZuIiwib3B0aW9ucyIsImNvbmZpZyIsInF1ZXVlIiwiZWFjaCIsImlkeCIsInN1cHBvcnRlZCIsInByb3AiLCJ0b1VwcGVyQ2FzZSIsImF0dHIiLCJ0b0xvd2VyQ2FzZSIsIkZpbGVSZWFkZXIiLCJmaWxlcyIsImxlbmd0aCIsImkiLCJwdXNoIiwiZmlsZSIsImlucHV0RWxlbSIsImluc3RhbmNlQ29uZmlnIiwiZXh0ZW5kIiwicGFyc2VOZXh0RmlsZSIsImlzRnVuY3Rpb24iLCJjb21wbGV0ZSIsImYiLCJiZWZvcmUiLCJyZXR1cm5lZCIsImFjdGlvbiIsImVycm9yIiwicmVhc29uIiwiZmlsZUNvbXBsZXRlIiwidXNlckNvbXBsZXRlRnVuYyIsInJlc3VsdHMiLCJuYW1lIiwiZWxlbSIsInNwbGljZSIsIm9ubWVzc2FnZSIsIndvcmtlclRocmVhZFJlY2VpdmVkTWVzc2FnZSIsIl9pbnB1dCIsIl9jb25maWciLCJkeW5hbWljVHlwaW5nIiwiZHluYW1pY1R5cGluZ0Z1bmN0aW9uIiwidHJhbnNmb3JtIiwid29ya2VyIiwidyIsIm5ld1dvcmtlciIsInVzZXJTdGVwIiwic3RlcCIsInVzZXJDaHVuayIsImNodW5rIiwidXNlckNvbXBsZXRlIiwidXNlckVycm9yIiwiaW5wdXQiLCJ3b3JrZXJJZCIsImlkIiwic3RyZWFtZXIiLCJnZXRTdHJlYW0iLCJzdHJpcEJvbSIsImRvd25sb2FkIiwicmVhZGFibGUiLCJyZWFkIiwib24iLCJGaWxlIiwiT2JqZWN0Iiwic3RyZWFtIiwic3RyaW5nIiwiY2hhckNvZGVBdCIsInNsaWNlIiwiX3F1b3RlcyIsIl93cml0ZUhlYWRlciIsIl9kZWxpbWl0ZXIiLCJfbmV3bGluZSIsIl9xdW90ZUNoYXIiLCJfZXNjYXBlZFF1b3RlIiwiX3NraXBFbXB0eUxpbmVzIiwiX2NvbHVtbnMiLCJfZXNjYXBlRm9ybXVsYWUiLCJ1bnBhY2tDb25maWciLCJxdW90ZUNoYXJSZWdleCIsIlJlZ0V4cCIsImVzY2FwZVJlZ0V4cCIsIkpTT04iLCJBcnJheSIsImlzQXJyYXkiLCJzZXJpYWxpemUiLCJrZXlzIiwiZGF0YSIsImZpZWxkcyIsIm1ldGEiLCJFcnJvciIsImRlbGltaXRlciIsImZpbHRlciIsInZhbHVlIiwiaW5kZXhPZiIsInF1b3RlcyIsInNraXBFbXB0eUxpbmVzIiwibmV3bGluZSIsInF1b3RlQ2hhciIsImhlYWRlciIsImNvbHVtbnMiLCJlc2NhcGVDaGFyIiwidW5kZWZpbmVkIiwiZXNjYXBlRm9ybXVsYWUiLCJjc3YiLCJoYXNIZWFkZXIiLCJkYXRhS2V5ZWRCeUZpZWxkIiwic2FmZSIsInJvdyIsIm1heENvbCIsImVtcHR5TGluZSIsIm51bGxMaW5lIiwiam9pbiIsInRyaW0iLCJsaW5lIiwiYyIsImN4IiwiY29sIiwiY29sSWR4Iiwic3RyIiwiY29uc3RydWN0b3IiLCJEYXRlIiwic3RyaW5naWZ5IiwibmVlZHNRdW90ZXMiLCJ0ZXN0IiwiZXNjYXBlZFF1b3RlU3RyIiwicmVwbGFjZSIsImhhc0FueSIsImNoYXJBdCIsInN1YnN0cmluZ3MiLCJDaHVua1N0cmVhbWVyIiwiX2hhbmRsZSIsIl9maW5pc2hlZCIsIl9jb21wbGV0ZWQiLCJfaGFsdGVkIiwiX2Jhc2VJbmRleCIsIl9wYXJ0aWFsTGluZSIsIl9yb3dDb3VudCIsIl9zdGFydCIsIl9uZXh0Q2h1bmsiLCJpc0ZpcnN0Q2h1bmsiLCJfY29tcGxldGVSZXN1bHRzIiwiZXJyb3JzIiwicmVwbGFjZUNvbmZpZyIsImNhbGwiLCJwYXJzZUNodW5rIiwiaXNGYWtlQ2h1bmsiLCJza2lwRmlyc3ROTGluZXMiLCJwYXJzZUludCIsImd1ZXNzTGluZUVuZGluZ3MiLCJzcGxpdENodW5rIiwic3BsaXQiLCJiZWZvcmVGaXJzdENodW5rIiwibW9kaWZpZWRDaHVuayIsImFnZ3JlZ2F0ZSIsInBhdXNlZCIsImFib3J0ZWQiLCJsYXN0SW5kZXgiLCJjdXJzb3IiLCJzdWJzdHJpbmciLCJmaW5pc2hlZEluY2x1ZGluZ1ByZXZpZXciLCJwcmV2aWV3IiwiV09SS0VSX0lEIiwiZmluaXNoZWQiLCJjb25jYXQiLCJfc2VuZEVycm9yIiwiY29uZmlnQ29weSIsImNvcHkiLCJjaHVua1NpemUiLCJ4aHIiLCJfcmVhZENodW5rIiwiX2NodW5rTG9hZGVkIiwidXJsIiwiWE1MSHR0cFJlcXVlc3QiLCJ3aXRoQ3JlZGVudGlhbHMiLCJvbmxvYWQiLCJiaW5kRnVuY3Rpb24iLCJvbmVycm9yIiwiX2NodW5rRXJyb3IiLCJvcGVuIiwiZG93bmxvYWRSZXF1ZXN0Qm9keSIsImRvd25sb2FkUmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiaGVhZGVyTmFtZSIsInNldFJlcXVlc3RIZWFkZXIiLCJlbmQiLCJzZW5kIiwiZXJyIiwibWVzc2FnZSIsInN0YXR1cyIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVRleHQiLCJnZXRGaWxlU2l6ZSIsImVycm9yTWVzc2FnZSIsImVycm9yVGV4dCIsInN0YXR1c1RleHQiLCJjb250ZW50UmFuZ2UiLCJnZXRSZXNwb25zZUhlYWRlciIsImxhc3RJbmRleE9mIiwicHJvdG90eXBlIiwiY3JlYXRlIiwicmVhZGVyIiwidXNpbmdBc3luY1JlYWRlciIsIndlYmtpdFNsaWNlIiwibW96U2xpY2UiLCJGaWxlUmVhZGVyU3luYyIsIk1hdGgiLCJtaW4iLCJzaXplIiwidHh0IiwicmVhZEFzVGV4dCIsImVuY29kaW5nIiwidGFyZ2V0IiwicmVzdWx0IiwiZXZlbnQiLCJyZW1haW5pbmciLCJzIiwicGFyc2VPbkRhdGEiLCJzdHJlYW1IYXNFbmRlZCIsInBhdXNlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJyZXN1bWUiLCJfc3RyZWFtRGF0YSIsIl9zdHJlYW1FbmQiLCJfc3RyZWFtRXJyb3IiLCJfY2hlY2tJc0ZpbmlzaGVkIiwic2hpZnQiLCJfc3RyZWFtQ2xlYW5VcCIsInJlbW92ZUxpc3RlbmVyIiwiRHVwbGV4IiwicmVxdWlyZSIsInBhcnNlT25Xcml0ZSIsIndyaXRlU3RyZWFtSGFzRmluaXNoZWQiLCJwYXJzZUNhbGxiYWNrUXVldWUiLCJfb25Dc3ZEYXRhIiwiX29uQ3N2Q29tcGxldGUiLCJfYWRkVG9QYXJzZVF1ZXVlIiwiY2FsbGJhY2siLCJfb25SZWFkIiwiX29uV3JpdGUiLCJfb25Xcml0ZUNvbXBsZXRlIiwicmVhZGFibGVPYmplY3RNb2RlIiwiZGVjb2RlU3RyaW5ncyIsIndyaXRlIiwib25jZSIsIk1BWF9GTE9BVCIsInBvdyIsIk1JTl9GTE9BVCIsIkZMT0FUIiwiSVNPX0RBVEUiLCJfc3RlcENvdW50ZXIiLCJfcm93Q291bnRlciIsIl9wYXJzZXIiLCJfcGF1c2VkIiwiX2Fib3J0ZWQiLCJfZGVsaW1pdGVyRXJyb3IiLCJfZmllbGRzIiwiX3Jlc3VsdHMiLCJuZWVkc0hlYWRlclJvdyIsInByb2Nlc3NSZXN1bHRzIiwiYWJvcnQiLCJiYXNlSW5kZXgiLCJpZ25vcmVMYXN0Um93IiwiZGVsaW1HdWVzcyIsImd1ZXNzRGVsaW1pdGVyIiwiY29tbWVudHMiLCJkZWxpbWl0ZXJzVG9HdWVzcyIsInN1Y2Nlc3NmdWwiLCJiZXN0RGVsaW1pdGVyIiwicGFyc2VyQ29uZmlnIiwiZ2V0Q2hhckluZGV4Iiwic2V0VGltZW91dCIsInJlIiwiciIsIm4iLCJuQXBwZWFyc0ZpcnN0IiwibnVtV2l0aE4iLCJ0ZXN0RW1wdHlMaW5lIiwidGVzdEZsb2F0IiwiZmxvYXRWYWx1ZSIsInBhcnNlRmxvYXQiLCJhZGRFcnJvciIsImQiLCJmaWxsSGVhZGVyRmllbGRzIiwiYXBwbHlIZWFkZXJBbmREeW5hbWljVHlwaW5nQW5kVHJhbnNmb3JtYXRpb24iLCJhZGRIZWFkZXIiLCJ0cmFuc2Zvcm1IZWFkZXIiLCJmb3JFYWNoIiwic2hvdWxkQXBwbHlEeW5hbWljVHlwaW5nIiwiZmllbGQiLCJwYXJzZUR5bmFtaWMiLCJwcm9jZXNzUm93Iiwicm93U291cmNlIiwiaiIsImluY3JlbWVudEJ5IiwibWFwIiwiYmVzdERlbGltIiwiYmVzdERlbHRhIiwiZmllbGRDb3VudFByZXZSb3ciLCJtYXhGaWVsZENvdW50IiwiZGVsaW0iLCJkZWx0YSIsImF2Z0ZpZWxkQ291bnQiLCJlbXB0eUxpbmVzQ291bnQiLCJmaWVsZENvdW50IiwiYWJzIiwibXNnIiwiZmFzdE1vZGUiLCJyZW5hbWVkSGVhZGVycyIsImhlYWRlclBhcnNlZCIsImlucHV0TGVuIiwiZGVsaW1MZW4iLCJuZXdsaW5lTGVuIiwiY29tbWVudHNMZW4iLCJzdGVwSXNGdW5jdGlvbiIsImxhc3RDdXJzb3IiLCJyZXR1cm5hYmxlIiwicm93cyIsInB1c2hSb3ciLCJkb1N0ZXAiLCJuZXh0RGVsaW0iLCJuZXh0TmV3bGluZSIsInF1b3RlU2VhcmNoIiwiaW5kZXgiLCJmaW5pc2giLCJjaGVja1VwVG8iLCJzcGFjZXNCZXR3ZWVuUXVvdGVBbmREZWxpbWl0ZXIiLCJleHRyYVNwYWNlcyIsInN1YnN0ciIsInNwYWNlc0JldHdlZW5RdW90ZUFuZE5ld0xpbmUiLCJzYXZlUm93Iiwic3BhY2VMZW5ndGgiLCJ0ZXh0QmV0d2VlbkNsb3NpbmdRdW90ZUFuZEluZGV4IiwibmV3Q3Vyc29yIiwic3RvcHBlZCIsImhlYWRlckNvdW50IiwidXNlZEhlYWRlcnMiLCJTZXQiLCJkdXBsaWNhdGVIZWFkZXJzIiwibmV3SGVhZGVyIiwic3VmZml4Q291bnQiLCJoYXMiLCJhZGQiLCJjb25zb2xlIiwid2FybiIsImxpbmVicmVhayIsInRydW5jYXRlZCIsIndvcmtlclVybCIsIm1haW5UaHJlYWRSZWNlaXZlZE1lc3NhZ2UiLCJlIiwiY29tcGxldGVXb3JrZXIiLCJoYW5kbGUiLCJub3RJbXBsZW1lbnRlZCIsInRlcm1pbmF0ZSIsIm9iaiIsImNweSIsImtleSIsImZ1bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/papaparse/papaparse.js\n");

/***/ })

};
;